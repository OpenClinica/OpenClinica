<!-- This "template" contains comments about each of the elements contained in this file. 

Created by: [[Your Name]]
Date: [[Created date]]
Case report form: [[CRF Name]]
Translated variables: [[Key to variables and/or reference document]] -->


<!-- Each file should contain only 1 RuleImport -->
<RuleImport>
<!-- Rule Assignment contains one target with one or mor RuleRefs. This is where you define which variable you want to apply your Rule to and when executed, which actions you want to take place -->
	<RuleAssignment>
	<!-- Target is where you define which variable you want the error message to appear on. This is also the variable that the discrepancy note or email will be tied to. Within the target, the attribute Context is always required. The context is always giong to be Context="OC_RULES_V1" -->
	<Target Context="OC_RULES_V1"></Target>
		<!-- RuleRef is where you reference an existing RuleDef. This is how you define what expression to apply to your target and what actions should take place. -->
		<RuleRef OID="">
			<!-- Run defines when the rule Action is going to be executed. Indicate whether you want the rule to execute for with a "true" or "false".  ImportDataEntry must be provided but can only be false. If true is entered, it will be ignored -->
			<Run AdministrativeDataEntry="" InitialDataEntry="" DoubleDataEntry="" ImportDataEntry="false" Batch="" />
			<!-- Discrepancy note action means that a discrepancy note can be logged automatically when the referenced expression evaluates to a result. You can define if you want the action to occur if it evaluates to "true" or "false" -->
			<DiscrepancyNoteAction IfExpressionEvaluates="">
				<!-- Message is the error message that the data entry person would see. This is also the message that gets pre-populated in the detailed notes in the discrepancy note that gets logged -->
				<Message></Message>
			</DiscrepancyNoteAction>
			<!-- Email action means that an email can be sent automatically when the referenced expression evaluates to a result. You can define if you want the action to occur if it evaluates to "true" or "false" -->			
                <Run AdministrativeDataEntry="" InitialDataEntry="" DoubleDataEntry="" ImportDataEntry="false" Batch="" />
				<EmailAction IfExpressionEvaluates="">
				<!-- Message is the error message that the data entry person would see. This is also the message that gets pre-populated in the email that gets sent -->
				<Message></Message>
				<!-- To allows you to specify an email account that the email will be sent to. You can specify more than one email by using comma separated values: e.g. usera@example.com,userb@example.com -->
				<To></To>
			    </EmailAction>
				<NotificationAction IfExpressionEvaluates="">
				<!-- Message is the error message that the data entry person would see. This is also the message that gets pre-populated in the email that gets sent -->
				<Message></Message>
				<!-- To allows you to specify an email account that the email will be sent to. You can specify more than one email by using comma separated values: e.g. usera@example.com,userb@example.com -->
				<To></To>
			    </NotificaitonAction>
			<!-- Show action means that an item or group of items will be displayed automatically when the referenced expression evaluates to a result. The items or group of items to be shown must be part of the same CRF as the Target.  You can define if you want the action to occur if it evaluates to "true" or "false" -->
			<ShowAction IfExpressionEvaluates="">
                <Run AdministrativeDataEntry="" InitialDataEntry="" DoubleDataEntry="" ImportDataEntry="false" Batch="" />
 				<!-- Message is the information that the data entry person would see if the shown items or group of items is in the same section as the target. The message will not be displayed if the items or group of items to be shown are in a different section of the CRF -->
				<Message></Message>
 				<!-- DestinationProperty is the OID of the item or group of items that will be shown when the action executes -->
				<DestinationProperty OID =""/>
            </ShowAction>			
			<!-- Hide action means that an item or group of items will be displayed automatically when the referenced expression evaluates to a result. The items or group of items to be hidden must be part of the same CRF as the Target and not contain any data.  You can define if you want the action to occur if it evaluates to "true" or "false" -->
			<HideAction IfExpressionEvaluates="">
                <Run AdministrativeDataEntry="" InitialDataEntry="" DoubleDataEntry="" ImportDataEntry="false" Batch="" />
                <Message></Message>
 				<!-- DestinationProperty is the OID of the item or group of items that will be hidden when the action executes -->
				<DestinationProperty OID =""/>
            </HideAction>
 			<!-- InsertAction is used to insert a value into another item in the same CRF or another CRF in the same event definition.  It can be a calculated value, a single default value, or can be a value of another field.  You can define if you want the action to occur if it evaluates to "true" or "false" -->
			<InsertAction IfExpressionEvaluates="">
                <Run AdministrativeDataEntry="" InitialDataEntry="" DoubleDataEntry="" ImportDataEntry="false" Batch=""/>
			<!-- DestinationProperty is the item that will get the value inserted based on the rule expression.  If it is part of the same group as the target, you only need to provide the ITEM OID.  If it is in a different group, but the same CRF, you must provide the GROUP OID with the ITEM OID.   If the item is in a different CRF, you must provide the CRF OID, GROUP OID, and ITEM OID.  Value="" is the value you want to insert into the destination property -->
			<DestinationProperty OID="" Value=""></DestinationProperty>
					<!-- ValueExpression is used to copy a value from one item to another.  If it is part of the same group as the target, you only need to provide the ITEM OID.  If it is in a different group, but the same CRF, you must provide the GROUP OID with the ITEM OID.   If the item is in a different CRF, you must provide the CRF OID, GROUP OID, and ITEM OID.-->
					<ValueExpression Context="OC_RULES_V1"></ValueExpression>
            </InsertAction>
			<!-- Event Action is used to schedule an event automatically based on a rule. EventAction OID is the OID of the Event to be updated. -->
			<EventAction IfExpressionEvaluates="true" OID="">
			<!-- RunOnStatus allows you to control if the Event date of the future event (or the event to be created or updated) should be updated or not based on its status. For example if Event 2 is complete and the user updates the start date of Event 1, if RunOnStatus complete="false" then only Event 1 will be updated and no action will take place for Event 2. The sytem does not support automatic updates of Event Start Date with a status of Signed or Locked.-->
				<RunOnStatus not_scheduled="true" scheduled="true" data_entry_started="false" completed="false"  skipped="false" stopped="false"/>
				<!-- EventDestination Property is where you specify the property of the above Study Event which the rule should update. Currently the property which can be updated is "STARTDATE" -->
				<EventDestination Property="STARTDATE">
					<!-- ValueExpression is the value or the expression which will evaluate to a result be inserted into the start date. You can use Study Event Start Date, a specific date in the YYYY-MM-DD format, or _CURRENT_DATE, with + or - with integer values. Example: 
					<ValueExpression Context="OC_RULES_V1">SE_VISIT1 + 7</ValueExpression> --> 
					<ValueExpression Context="OC_RULES_V1"></ValueExpression>
				</EventDestination>
			</EventAction>
		</RuleRef>
	</RuleAssignment>
	<!-- RuleDef is where you define your expression and description. In the RuleDef tag, there are two attributes that must be defined: OID and Name. OID must be uniqe, all UPPERCASE and can not contain whitespace. Name should be a descriptive name for anyone that might be managing the rules through the rules interface. -->
	<RuleDef OID="" Name="">
	<!-- Description should be a detailed description of what the expresison is supposed to be evaluating. This should be useful to anyone who might be working with the XML files to help them better understand the context and the expression -->
		<Description></Description>
		<!-- The expression is the mathmatical definition of whats being evaluated -->
		<Expression></Expression>
	</RuleDef>
</RuleImport>