<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">
    <changeSet author="kkrumlian" id="2014-01-15-OC-1276-1" runOnChange="true">
        <preConditions onFail="MARK_RAN">
        <dbms type="postgresql" />
    </preConditions>
         <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION item_data_trigger() RETURNS "trigger"
            AS 'DECLARE
            pk INTEGER;
            entity_name_value TEXT;
            std_evnt_id INTEGER;
            crf_version_id INTEGER;
        BEGIN
            IF (TG_OP = ''DELETE'') THEN
                /*---------------*/
                 /*Item data deleted (by deleting an event crf)*/
                SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
                SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = OLD.item_id;
                SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
                SELECT INTO crf_version_id ec.crf_version_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id, study_event_id, event_crf_version_id)
                        VALUES (pk, ''13'', now(), OLD.update_id, ''item_data'', OLD.item_data_id, entity_name_value, OLD.value, OLD.event_crf_id, std_evnt_id, crf_version_id);
                RETURN NULL; --return values ignored for ''after'' triggers
            ELSIF (TG_OP = ''UPDATE'') THEN
        
                IF(OLD.value <![CDATA[<>]]> NEW.value) THEN
                /*---------------*/
                 /*Item data updated*/
                SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
                SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
                    VALUES (pk, ''1'', now(), NEW.update_id, ''item_data'', NEW.item_data_id, entity_name_value, OLD.value, NEW.value, NEW.event_crf_id);
                DELETE FROM rule_action_run_log where item_data_id = NEW.item_data_id;  
                /*---------------*/
                END IF;
                RETURN NULL;  /*return values ignored for ''after'' triggers*/
            END IF;
        RETURN NULL;  /*return values ignored for ''after'' triggers*/
        END;
        '
            LANGUAGE plpgsql;
         </sql>
    </changeSet>      
    
</databaseChangeLog>