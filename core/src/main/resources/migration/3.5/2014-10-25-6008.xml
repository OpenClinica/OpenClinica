<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">
    
    <changeSet author="jkeremian" id="2014-10-25-6008-1">
        <comment>Add Column item_data_repeat_key in audit_log_event table</comment>
        <addColumn tableName="audit_log_event">
            <column name="item_data_repeat_key" type="Integer"/>
            
        </addColumn>
    </changeSet>
    
    
    
     <changeSet author="jkeremian" id="2014-10-25-6008-2" runOnChange="true">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>
    	 <sql splitStatements="false">
    	 	CREATE OR REPLACE FUNCTION item_data_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
			std_evnt_id INTEGER;
			crf_version_id INTEGER;
		BEGIN
			IF (TG_OP = ''DELETE'') THEN
				/*---------------*/
				 /*Item data deleted (by deleting an event crf)*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = OLD.item_id;
		        SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
		        SELECT INTO crf_version_id ec.crf_version_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
		        INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id, study_event_id, event_crf_version_id ,item_data_repeat_key)
		                VALUES (pk, ''13'', now(), OLD.update_id, ''item_data'', OLD.item_data_id, entity_name_value, OLD.value, OLD.event_crf_id, std_evnt_id, crf_version_id, OLD.ordinal);
				RETURN NULL; --return values ignored for ''after'' triggers
			ELSIF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				 /*---------------*/
				 /*Item data status changed (by removing an event crf)*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
			
				/*---------------*/
				END IF;
		
				IF(OLD.value <![CDATA[<>]]> NEW.value) THEN
				/*---------------*/
				 /*Item data updated*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id ,item_data_repeat_key)
					VALUES (pk, ''1'', now(), NEW.update_id, ''item_data'', NEW.item_data_id, entity_name_value, OLD.value, NEW.value, NEW.event_crf_id , NEW.ordinal);
				/*---------------*/
				END IF;
				RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		RETURN NULL;  /*return values ignored for ''after'' triggers*/
		END;
		'
		    LANGUAGE plpgsql;
    	 </sql>
    </changeSet>
    

<changeSet author="jkeremian" id="2014-10-25-6008-3">
        <preConditions onFail="MARK_RAN"><dbms type="postgresql" /></preConditions>
        <comment>create item_data_initial_trigger()</comment> 
        <sql splitStatements="false">
            CREATE OR REPLACE FUNCTION item_data_initial_trigger() RETURNS "trigger"
            AS 'DECLARE
            pk INTEGER;
            entity_name_value TEXT;
            std_evnt_id INTEGER;
            crf_version_id INTEGER;
        BEGIN
            IF (TG_OP = ''INSERT'' and length(NEW.value)>0) THEN
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
		        SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = NEW.event_crf_id;
		        SELECT INTO crf_version_id ec.crf_version_id FROM event_crf ec WHERE ec.event_crf_id = NEW.event_crf_id;
		        INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, reason_for_change, new_value, event_crf_id, study_event_id, event_crf_version_id ,item_data_repeat_key)
		                VALUES (pk, ''1'', now(), NEW.owner_id, ''item_data'', NEW.item_data_id, entity_name_value, ''initial value'', NEW.value, NEW.event_crf_id, std_evnt_id, crf_version_id , NEW.ordinal);
				RETURN NULL;
            END IF;
        RETURN NULL;
        END;
        '
            LANGUAGE plpgsql
         </sql>
    </changeSet> 
    

    </databaseChangeLog>