<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">         
<!-- Postgres database specific functions -->
    <changeSet author="pgawade (generated)" id="1235684743487-358">
    	<preConditions onFail="MARK_RAN">
		<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>
    	<sql splitStatements="false">
    		CREATE OR REPLACE FUNCTION event_crf_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
		BEGIN
			IF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				/*---------------*/
				/*Event CRF status changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Status'';
				IF(OLD.status_id = ''1'' AND NEW.status_id = ''2'') THEN
				    IF (NEW.electronic_signature_status) THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''14'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            ELSE                    
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''8'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            END IF;                    
				ELSIF (OLD.status_id = ''1'' AND NEW.status_id = ''4'') THEN
				    IF (NEW.electronic_signature_status) THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''15'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            ELSE
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''10'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            END IF;
				ELSIF (OLD.status_id = ''4'' AND NEW.status_id = ''2'') THEN
		    		IF (NEW.electronic_signature_status) THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''16'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
				    ELSE
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''11'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
				    END IF;
				END IF;
				/*---------------*/
				END IF;
		
				IF(OLD.date_interviewed <![CDATA[<>]]> NEW.date_interviewed) THEN
				/*---------------*/
				/*Event CRF date interviewed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Date interviewed'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''9'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.date_interviewed, NEW.date_interviewed, NEW.event_crf_id);
				/*---------------*/
				END IF;
		
				IF((OLD.interviewer_name <![CDATA[<>]]> NEW.interviewer_name) AND (OLD.interviewer_name <![CDATA[<>]]> '''')) THEN		
				/*---------------*/
				/*Event CRF interviewer name*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Interviewer Name'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''9'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.interviewer_name, NEW.interviewer_name, NEW.event_crf_id);
				/*---------------*/
				END IF;
			RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		END;
		'
		    LANGUAGE plpgsql;
    	</sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-359">
    	<preConditions onFail="MARK_RAN">
    		<dbms type="postgresql" />
    		<!--<runningAs username="clinica" />-->
	</preConditions>
    	<sql splitStatements="false">
    		CREATE OR REPLACE FUNCTION global_subject_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
		BEGIN
			IF (TG_OP = ''INSERT'') THEN
				/*---------------*/
				 /*Subject created*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id)
					VALUES (pk, ''5'', now(), NEW.owner_id, ''subject'', NEW.subject_id);
				RETURN NULL; /*return values ignored for ''after'' triggers*/
				/*---------------*/
			ELSIF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				/*---------------*/
				 /*Subject status changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Status'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''6'', now(), NEW.update_id, ''subject'', NEW.subject_id, entity_name_value, OLD.status_id, NEW.status_id);
				/*---------------*/
				END IF;
		
				IF(OLD.unique_identifier <![CDATA[<>]]> NEW.unique_identifier) THEN
				/*---------------*/
				/*Subject value changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Person ID'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''7'', now(), NEW.update_id, ''subject'', NEW.subject_id, entity_name_value, OLD.unique_identifier, NEW.unique_identifier);
				/*---------------*/
				END IF;
		
				IF(OLD.date_of_birth <![CDATA[<>]]> NEW.date_of_birth) THEN
				/*---------------*/
				 /*Subject value changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Date of Birth'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''7'', now(), NEW.update_id, ''subject'', NEW.subject_id, entity_name_value, OLD.date_of_birth, NEW.date_of_birth);
				/*---------------*/
				END IF;
		
		        IF(OLD.gender <![CDATA[<>]]> NEW.gender) THEN
		   		/*---------------*/
		   		/*Subject value changed*/
		   		SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		   		SELECT INTO entity_name_value ''Gender'';
		   		INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
				VALUES (pk, ''7'', now(), NEW.update_id, ''subject'', NEW.subject_id, entity_name_value, OLD.gender, NEW.gender);
		   		/*---------------*/
		   		END IF;
				
			RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		END;
		'
		    LANGUAGE plpgsql;
    	</sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-360" runOnChange="true">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>
    	 <sql splitStatements="false">
    	 	CREATE OR REPLACE FUNCTION item_data_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
			std_evnt_id INTEGER;
			crf_version_id INTEGER;
		BEGIN
			IF (TG_OP = ''DELETE'') THEN
				/*---------------*/
				 /*Item data deleted (by deleting an event crf)*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = OLD.item_id;
		        SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
		        SELECT INTO crf_version_id ec.crf_version_id FROM event_crf ec WHERE ec.event_crf_id = OLD.event_crf_id;
		        INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id, study_event_id, event_crf_version_id)
		                VALUES (pk, ''13'', now(), OLD.update_id, ''item_data'', OLD.item_data_id, entity_name_value, OLD.value, OLD.event_crf_id, std_evnt_id, crf_version_id);
				RETURN NULL; --return values ignored for ''after'' triggers
			ELSIF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				 /*---------------*/
				 /*Item data status changed (by removing an event crf)*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
			
				/*---------------*/
				END IF;
		
				IF(OLD.value <![CDATA[<>]]> NEW.value) THEN
				/*---------------*/
				 /*Item data updated*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''1'', now(), NEW.update_id, ''item_data'', NEW.item_data_id, entity_name_value, OLD.value, NEW.value, NEW.event_crf_id);
				/*---------------*/
				END IF;
				RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		RETURN NULL;  /*return values ignored for ''after'' triggers*/
		END;
		'
		    LANGUAGE plpgsql;
    	 </sql>
    </changeSet>
    
    
    
    <changeSet author="pgawade (generated)" id="1235684743487-361">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>    
	 <sql splitStatements="false">
	 	CREATE OR REPLACE FUNCTION study_subject_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
		    old_unique_identifier TEXT;
		    new_unique_identifier TEXT;
		
		BEGIN
			IF (TG_OP = ''INSERT'') THEN
				/*---------------*/
				 /*Study subject created*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id)
					VALUES (pk, ''2'', now(), NEW.owner_id, ''study_subject'', NEW.study_subject_id);
				RETURN NULL; /*return values ignored for ''after'' triggers*/
				/*---------------*/
			ELSIF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				 /*---------------*/
				/*Study subject status changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Status'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''3'', now(), NEW.update_id, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.status_id, NEW.status_id);
				/*---------------*/
				END IF;
		
				IF(OLD.label <![CDATA[<>]]> NEW.label) THEN
				/*---------------*/
				 /*Study subject value changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Study Subject ID'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''4'', now(), NEW.update_id, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.label, NEW.label);
				/*---------------*/
				END IF;
		
				IF(OLD.secondary_label <![CDATA[<>]]> NEW.secondary_label) THEN
				/*---------------*/
				/*Study subject value changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Secondary Subject ID'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''4'', now(), NEW.update_id, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.secondary_label, NEW.secondary_label);
				/*---------------*/
				END IF;
		
				IF(OLD.enrollment_date <![CDATA[<>]]> NEW.enrollment_date) THEN
				/*---------------*/
				/*Study subject value changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Enrollment Date'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
					VALUES (pk, ''4'', now(), NEW.update_id, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.enrollment_date, NEW.enrollment_date);
				 /*---------------*/
				END IF;
		
		        IF(OLD.study_id <![CDATA[<>]]> NEW.study_id) THEN
		         /*---------------*/
		         /*Subject reassigned*/
		        SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		        SELECT INTO entity_name_value ''Study id'';
		        SELECT INTO old_unique_identifier study.unique_identifier FROM study study WHERE study.study_id = OLD.study_id;
		        SELECT INTO new_unique_identifier study.unique_identifier FROM study study WHERE study.study_id = NEW.study_id;
		        INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		            VALUES (pk, ''27'', now(), NEW.update_id, ''study_subject'', NEW.study_subject_id, entity_name_value, old_unique_identifier, new_unique_identifier);
		        /*---------------*/
		        END IF;
		
			RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		END;
		'
		    LANGUAGE plpgsql;
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-362" runOnChange="true">
    	 <preConditions onFail="MARK_RAN">
	 	 <dbms type="postgresql" />
		 <!--<runningAs username="clinica" />-->
	 </preConditions> 
	 <sql splitStatements="false">
	 	CREATE OR REPLACE FUNCTION study_event_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
		BEGIN
			IF (TG_OP = ''INSERT'') THEN
		        SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		        IF(NEW.subject_event_status_id = ''1'') THEN
		            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		            VALUES (pk, ''17'', now(), NEW.owner_id, ''study_event'', NEW.study_event_id, ''Status'',''0'', NEW.subject_event_status_id);
		        END IF;
		    END IF;
		
			IF (TG_OP = ''UPDATE'') THEN
				IF(OLD.subject_event_status_id <![CDATA[<>]]> NEW.subject_event_status_id) THEN
		            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		            IF(NEW.subject_event_status_id = ''1'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''17'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
		            ELSIF(NEW.subject_event_status_id = ''3'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''18'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
		            ELSIF(NEW.subject_event_status_id = ''4'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''19'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
		            ELSIF(NEW.subject_event_status_id = ''5'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''20'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
		            ELSIF(NEW.subject_event_status_id = ''6'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''21'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
		            ELSIF(NEW.subject_event_status_id = ''7'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''22'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
		            ELSIF(NEW.subject_event_status_id = ''8'') THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''31'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.subject_event_status_id, NEW.subject_event_status_id);
				    END IF;
			    END IF;
		        IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
		            IF(NEW.status_id = ''5'' or NEW.status_id = ''1'') THEN
		                SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		                VALUES (pk, ''23'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Status'', OLD.status_id, NEW.status_id);
		            END IF;
		        END IF;
		        IF(OLD.date_start <![CDATA[<>]]> NEW.date_start) THEN
		            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		            VALUES (pk, ''24'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Start date'', OLD.date_start, NEW.date_start);
		        END IF;
		        IF(OLD.date_end <![CDATA[<>]]> NEW.date_end) THEN
		            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		            VALUES (pk, ''25'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''End date'', OLD.date_end, NEW.date_end);
		        END IF;
		        IF(OLD.location <![CDATA[<>]]> NEW.location) THEN
		            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		            VALUES (pk, ''26'', now(), NEW.update_id, ''study_event'', NEW.study_event_id, ''Location'', OLD.location, NEW.location);
		        END IF;
		    	RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
			RETURN NULL;
		END;'
		    LANGUAGE plpgsql;
	 </sql>
    </changeSet>    
    <changeSet author="pgawade (generated)" id="1235684743487-363">
    	 <preConditions onFail="MARK_RAN">
	 	 <dbms type="postgresql" />
		 <!--<runningAs username="clinica" />-->
	 </preConditions> 	 
	 <sql splitStatements="false">
	 	/*group assignment trigger*/
		CREATE OR REPLACE FUNCTION subject_group_assignment_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			group_name TEXT;
			old_group_name TEXT;
			new_group_name TEXT;
		BEGIN
			IF (TG_OP = ''INSERT'') THEN
		        SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		        SELECT INTO group_name sg.name FROM study_group sg WHERE sg.study_group_id = NEW.study_group_id;
		        INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		        VALUES (pk, ''28'', now(), NEW.owner_id, ''subject_group_map'', NEW.study_subject_id, ''Status'','''', group_name);
		    END IF;
			IF (TG_OP = ''UPDATE'') THEN
				IF(OLD.study_group_id <![CDATA[<>]]> NEW.study_group_id) THEN
		            SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		            SELECT INTO old_group_name sg.name FROM study_group sg WHERE sg.study_group_id = OLD.study_group_id;
		            SELECT INTO new_group_name sg.name FROM study_group sg WHERE sg.study_group_id = NEW.study_group_id;
		            INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
		            VALUES (pk, ''29'', now(), NEW.update_id, ''subject_group_map'', NEW.study_subject_id, ''Status'',old_group_name, new_group_name);
			    END IF;
		    	RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
			RETURN NULL;
		END;'
		    LANGUAGE plpgsql;
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-364">
	 <preConditions onFail="MARK_RAN">
		 <dbms type="postgresql" />
		 <!--<runningAs username="clinica" />-->
	 </preConditions> 
    	 <sql splitStatements="false">
    	 	CREATE OR REPLACE FUNCTION repeating_item_data_trigger()
		  RETURNS "trigger" AS
		'DECLARE
		 pk INTEGER;
		 entity_name_value TEXT;
		 std_evnt_id INTEGER;
		 crf_version_id INTEGER;
		 validator_id INTEGER;
		 event_crf_status_id INTEGER;
		
		
		BEGIN
		 IF (TG_OP = ''INSERT'') THEN
		  /*---------------*/ 
		  SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
		  SELECT INTO entity_name_value item.name FROM item WHERE item.item_id = NEW.item_id;
		        SELECT INTO std_evnt_id ec.study_event_id FROM event_crf ec WHERE ec.event_crf_id = NEW.event_crf_id;
		        SELECT INTO crf_version_id ec.crf_version_id FROM event_crf ec WHERE ec.event_crf_id = NEW.event_crf_id;
		 SELECT INTO validator_id ec.validator_id FROM event_crf ec WHERE ec.event_crf_id = NEW.event_crf_id;
		 SELECT INTO event_crf_status_id ec.status_id FROM event_crf ec WHERE ec.event_crf_id = NEW.event_crf_id;
		 
		        IF (NEW.status_id = ''2'' AND NEW.ordinal <![CDATA[>]]> 1 AND validator_id <![CDATA[>]]> 0 AND event_crf_status_id  = ''4'') THEN  /*DDE*/
		          
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, new_value, event_crf_id, study_event_id, event_crf_version_id)
		                VALUES (pk, ''30'', now(), NEW.owner_id, ''item_data'', NEW.item_data_id, entity_name_value, NEW.value, NEW.event_crf_id, std_evnt_id, crf_version_id);
		        ELSE 
		          IF(NEW.status_id =''2'' AND NEW.ordinal <![CDATA[>]]> 1  AND event_crf_status_id  = ''2'') THEN /*ADE*/
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, new_value, event_crf_id, study_event_id, event_crf_version_id)
		                VALUES (pk, ''30'', now(), NEW.owner_id, ''item_data'', NEW.item_data_id, entity_name_value, NEW.value, NEW.event_crf_id, std_evnt_id, crf_version_id);
		          END IF;
		       END IF;
		  RETURN NULL;  /*return values ignored for ''after'' triggers*/
		 
		 END IF;
		RETURN NULL;  /*return values ignored for ''after'' triggers*/
		END; ' LANGUAGE plpgsql VOLATILE;
    	 </sql>
    </changeSet>
    
    
    
    <changeSet author="pgawade (generated)" id="1235684743487-365">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     	 
    	 <sql splitStatements="false">
    	 	CREATE TRIGGER event_crf_update
		    AFTER UPDATE ON event_crf
		    FOR EACH ROW
		    EXECUTE PROCEDURE event_crf_trigger();
    	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-366">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     
	 <sql splitStatements="false">
	 	CREATE TRIGGER global_subject_insert_update
		    AFTER INSERT OR UPDATE ON subject
		    FOR EACH ROW
		    EXECUTE PROCEDURE global_subject_trigger();
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-367">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     
	 <sql splitStatements="false">
	 	CREATE TRIGGER item_data_update
		    AFTER DELETE OR UPDATE ON item_data
		    FOR EACH ROW
		    EXECUTE PROCEDURE item_data_trigger();
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-368">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     
	 <sql splitStatements="false">
	 	CREATE TRIGGER study_subject_insert_updare
		    AFTER INSERT OR UPDATE ON study_subject
		    FOR EACH ROW
		    EXECUTE PROCEDURE study_subject_trigger();
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-369">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     
	 <sql splitStatements="false">
	 	CREATE TRIGGER study_event_insert_update
		    AFTER INSERT OR UPDATE ON study_event
		    FOR EACH ROW
		    EXECUTE PROCEDURE study_event_trigger();
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-370">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     
	 <sql splitStatements="false">
	 	CREATE TRIGGER subject_group_map_insert_update
		    AFTER INSERT OR UPDATE ON subject_group_map
		    FOR EACH ROW
		    EXECUTE PROCEDURE subject_group_assignment_trigger();
	 </sql>
    </changeSet>
    <changeSet author="pgawade (generated)" id="1235684743487-371">
    	 <preConditions onFail="MARK_RAN">
	 	 <dbms type="postgresql" />
		 <!--<runningAs username="clinica" />-->
	 </preConditions>     
	 <sql splitStatements="false">
	 	CREATE TRIGGER repeating_data_insert
		  AFTER INSERT
		  ON item_data
		  FOR EACH ROW
  		  EXECUTE PROCEDURE repeating_item_data_trigger();
	 </sql>
    </changeSet>
<!-- Oracle database specific sequnces, triggers, packages -->   
<!-- TRIGGERS -->
	<changeSet author="pgawade (generated)" id="1235684743487-93">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
		<sql splitStatements="false">
			/* --
		prompt Create trigger EVENT_CRF_UPDATE on table EVENT_CRF
		-- */

		CREATE OR REPLACE TRIGGER event_crf_update
		    AFTER UPDATE ON event_crf
		    FOR EACH ROW
		declare
		trg_operation varchar2(10);
		newrec  event_crf%rowtype;
		oldrec  event_crf%rowtype;
		begin
		/* -- */
		newrec.EVENT_CRF_ID                := :new.EVENT_CRF_ID;
		newrec.STUDY_EVENT_ID              := :new.STUDY_EVENT_ID;
		newrec.CRF_VERSION_ID              := :new.CRF_VERSION_ID;
		newrec.DATE_INTERVIEWED            := :new.DATE_INTERVIEWED;
		newrec.INTERVIEWER_NAME            := :new.INTERVIEWER_NAME;
		newrec.COMPLETION_STATUS_ID        := :new.COMPLETION_STATUS_ID;
		newrec.STATUS_ID                   := :new.STATUS_ID;
		newrec.ANNOTATIONS                 := :new.ANNOTATIONS;
		newrec.DATE_COMPLETED              := :new.DATE_COMPLETED;
		newrec.VALIDATOR_ID                := :new.VALIDATOR_ID;
		newrec.DATE_VALIDATE               := :new.DATE_VALIDATE;
		newrec.DATE_VALIDATE_COMPLETED     := :new.DATE_VALIDATE_COMPLETED;
		newrec.VALIDATOR_ANNOTATIONS       := :new.VALIDATOR_ANNOTATIONS;
		newrec.VALIDATE_STRING             := :new.VALIDATE_STRING;
		newrec.OWNER_ID                    := :new.OWNER_ID;
		newrec.DATE_CREATED                := :new.DATE_CREATED;
		newrec.STUDY_SUBJECT_ID            := :new.STUDY_SUBJECT_ID;
		newrec.DATE_UPDATED                := :new.DATE_UPDATED;
		newrec.UPDATE_ID                   := :new.UPDATE_ID;
		newrec.ELECTRONIC_SIGNATURE_STATUS := :new.ELECTRONIC_SIGNATURE_STATUS;
		/* -- */
		oldrec.EVENT_CRF_ID                := :old.EVENT_CRF_ID;
		oldrec.STUDY_EVENT_ID              := :old.STUDY_EVENT_ID;
		oldrec.CRF_VERSION_ID              := :old.CRF_VERSION_ID;
		oldrec.DATE_INTERVIEWED            := :old.DATE_INTERVIEWED;
		oldrec.INTERVIEWER_NAME            := :old.INTERVIEWER_NAME;
		oldrec.COMPLETION_STATUS_ID        := :old.COMPLETION_STATUS_ID;
		oldrec.STATUS_ID                   := :old.STATUS_ID;
		oldrec.ANNOTATIONS                 := :old.ANNOTATIONS;
		oldrec.DATE_COMPLETED              := :old.DATE_COMPLETED;
		oldrec.VALIDATOR_ID                := :old.VALIDATOR_ID;
		oldrec.DATE_VALIDATE               := :old.DATE_VALIDATE;
		oldrec.DATE_VALIDATE_COMPLETED     := :old.DATE_VALIDATE_COMPLETED;
		oldrec.VALIDATOR_ANNOTATIONS       := :old.VALIDATOR_ANNOTATIONS;
		oldrec.VALIDATE_STRING             := :old.VALIDATE_STRING;
		oldrec.OWNER_ID                    := :old.OWNER_ID;
		oldrec.DATE_CREATED                := :old.DATE_CREATED;
		oldrec.STUDY_SUBJECT_ID            := :old.STUDY_SUBJECT_ID;
		oldrec.DATE_UPDATED                := :old.DATE_UPDATED;
		oldrec.UPDATE_ID                   := :old.UPDATE_ID;
		oldrec.ELECTRONIC_SIGNATURE_STATUS := :old.ELECTRONIC_SIGNATURE_STATUS;
		/* -- 
		   -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /* -- */
		   clinica_table_api.event_crf_trigger(trg_operation, newrec, oldrec);
		end;
		/* / */
		</sql>
	</changeSet>	
	<changeSet author="pgawade (generated)" id="1235684743487-94">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
		<sql splitStatements="false">
			 /* -- 
		prompt Create trigger GLOBAL_SUBJECT_INSERT_UPDATE on table SUBJECT
		-- */

		CREATE OR REPLACE TRIGGER global_subject_insert_update
		    AFTER INSERT OR UPDATE ON subject
		    FOR EACH ROW
		declare
		trg_operation varchar2(10);
		newrec  subject%rowtype;
		oldrec  subject%rowtype;
		begin
		/*  -- */
		  newrec.SUBJECT_ID         := :new.SUBJECT_ID;
		  newrec.FATHER_ID          := :new.FATHER_ID;
		  newrec.MOTHER_ID          := :new.MOTHER_ID;
		  newrec.STATUS_ID          := :new.STATUS_ID;
		  newrec.DATE_OF_BIRTH      := :new.DATE_OF_BIRTH;
		  newrec.GENDER             := :new.GENDER;
		  newrec.UNIQUE_IDENTIFIER  := :new.UNIQUE_IDENTIFIER;
		  newrec.DATE_CREATED       := :new.DATE_CREATED;
		  newrec.OWNER_ID           := :new.OWNER_ID;
		  newrec.DATE_UPDATED       := :new.DATE_UPDATED;
		  newrec.UPDATE_ID          := :new.UPDATE_ID;
		  newrec.DOB_COLLECTED      := :new.DOB_COLLECTED;
		  /*  -- */
		  oldrec.SUBJECT_ID         := :old.SUBJECT_ID;
		  oldrec.FATHER_ID          := :old.FATHER_ID;
		  oldrec.MOTHER_ID          := :old.MOTHER_ID;
		  oldrec.STATUS_ID          := :old.STATUS_ID;
		  oldrec.DATE_OF_BIRTH      := :old.DATE_OF_BIRTH;
		  oldrec.GENDER             := :old.GENDER;
		  oldrec.UNIQUE_IDENTIFIER  := :old.UNIQUE_IDENTIFIER;
		  oldrec.DATE_CREATED       := :old.DATE_CREATED;
		  oldrec.OWNER_ID           := :old.OWNER_ID;
		  oldrec.DATE_UPDATED       := :old.DATE_UPDATED;
		  oldrec.UPDATE_ID          := :old.UPDATE_ID;
		  oldrec.DOB_COLLECTED      := :old.DOB_COLLECTED;

		  /*  -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /*  -- */
		   clinica_table_api.global_subject_trigger(trg_operation, newrec, oldrec);
		end;
	    /*  / */


		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-95">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			 /*  -- 
		prompt Create trigger ITEM_DATA_UPDATE on table ITEM_DATA
		-- */

		CREATE OR REPLACE TRIGGER item_data_update
		    AFTER DELETE OR UPDATE ON item_data
		    FOR EACH ROW
		declare
		  trg_operation  varchar2(10);
		  newrec         item_data%rowtype;
		  oldrec         item_data%rowtype;
		begin
		  /*  -- */
		  newrec.ITEM_DATA_ID := :new.ITEM_DATA_ID;
		  newrec.ITEM_ID      := :new.ITEM_ID;
		  newrec.EVENT_CRF_ID := :new.EVENT_CRF_ID;
		  newrec.STATUS_ID    := :new.STATUS_ID;
		  newrec.VALUE        := :new.VALUE;
		  newrec.DATE_CREATED := :new.DATE_CREATED;
		  newrec.DATE_UPDATED := :new.DATE_UPDATED;
		  newrec.OWNER_ID     := :new.OWNER_ID;
		  newrec.UPDATE_ID    := :new.UPDATE_ID;
		  newrec.ORDINAL      := :new.ORDINAL;
		  /*  -- */
		  oldrec.ITEM_DATA_ID := :old.ITEM_DATA_ID;
		  oldrec.ITEM_ID      := :old.ITEM_ID;
		  oldrec.EVENT_CRF_ID := :old.EVENT_CRF_ID;
		  oldrec.STATUS_ID    := :old.STATUS_ID;
		  oldrec.VALUE        := :old.VALUE;
		  oldrec.DATE_CREATED := :old.DATE_CREATED;
		  oldrec.DATE_UPDATED := :old.DATE_UPDATED;
		  oldrec.OWNER_ID     := :old.OWNER_ID;
		  oldrec.UPDATE_ID    := :old.UPDATE_ID;
		  oldrec.ORDINAL      := :old.ORDINAL;
		  /*  -- */
		  /*  -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /*  -- */
		  clinica_table_api.item_data_trigger(trg_operation, newrec, oldrec);
		  /*  -- */
		end;
	     /* /  */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-96">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger STUDY_EVENT_INSERT_UPDATE on table STUDY_EVENT
		  -- */

		CREATE OR REPLACE TRIGGER study_event_insert_update
		    AFTER INSERT OR UPDATE ON study_event
		    FOR EACH ROW
		declare
		  trg_operation  varchar2(10);
		  newrec         study_event%rowtype;
		  oldrec         study_event%rowtype;
		begin
		  /*  -- */

		  newrec.study_event_id             := :new.study_event_id;
		  newrec.study_event_definition_id  := :new.study_event_definition_id;
		  newrec.study_subject_id           := :new.study_subject_id;
		  newrec.sample_ordinal             := :new.sample_ordinal;
		  newrec.date_start                 := :new.date_start;
		  newrec.date_end                   := :new.date_end;
		  newrec.owner_id                   := :new.owner_id;
		  newrec.status_id                  := :new.status_id;
		  newrec.date_created               := :new.date_created;
		  newrec.date_updated               := :new.date_updated;
		  newrec.update_id                  := :new.update_id;
		  newrec.subject_event_status_id    := :new.subject_event_status_id;
		  newrec.start_time_flag            := :new.start_time_flag;
		  newrec.end_time_flag              := :new.end_time_flag;
		  /*newrec."location"                 := :new."location";*/
		  newrec.location                 := :new.location;
		  /*  -- */
		  oldrec.study_event_id             := :old.study_event_id;
		  oldrec.study_event_definition_id  := :old.study_event_definition_id;
		  oldrec.study_subject_id           := :old.study_subject_id;
		  oldrec.sample_ordinal             := :old.sample_ordinal;
		  oldrec.date_start                 := :old.date_start;
		  oldrec.date_end                   := :old.date_end;
		  oldrec.owner_id                   := :old.owner_id;
		  oldrec.status_id                  := :old.status_id;
		  oldrec.date_created               := :old.date_created;
		  oldrec.date_updated               := :old.date_updated;
		  oldrec.update_id                  := :old.update_id;
		  oldrec.subject_event_status_id    := :old.subject_event_status_id;
		  oldrec.start_time_flag            := :old.start_time_flag;
		  oldrec.end_time_flag              := :old.end_time_flag;
		  /*oldrec."location"                 := :old."location";*/
		  oldrec.location                 := :old.location;
		  /*  -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /*  -- */
		  clinica_table_api.study_event_trigger(trg_operation, newrec, oldrec);
		end;
	      /* /  */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-97">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  --
		prompt Create trigger STUDY_SUBJECT_INSERT_UPDATE on table STUDY_SUBJECT
		  -- */

		CREATE OR REPLACE TRIGGER study_subject_insert_update
		    AFTER INSERT OR UPDATE ON study_subject
		    FOR EACH ROW
		declare
		  trg_operation  varchar2(10);
		  newrec         study_subject%rowtype;
		  oldrec         study_subject%rowtype;
		begin
		  /*  -- */
		  newrec.STUDY_SUBJECT_ID  := :new.STUDY_SUBJECT_ID;
		  newrec.LABEL             := :new.LABEL;
		  newrec.SECONDARY_LABEL   := :new.SECONDARY_LABEL;
		  newrec.SUBJECT_ID        := :new.SUBJECT_ID;
		  newrec.STUDY_ID          := :new.STUDY_ID;
		  newrec.STATUS_ID         := :new.STATUS_ID;
		  newrec.ENROLLMENT_DATE   := :new.ENROLLMENT_DATE;
		  newrec.DATE_CREATED      := :new.DATE_CREATED;
		  NEWREC.UPDATE_ID         := :new.UPDATE_ID;
		  NEWREC.OWNER_ID          := :new.OWNER_ID;
		  /*  -- */
		  oldrec.STUDY_SUBJECT_ID  := :old.STUDY_SUBJECT_ID;
		  oldrec.LABEL             := :old.LABEL;
		  oldrec.SECONDARY_LABEL   := :old.SECONDARY_LABEL;
		  oldrec.SUBJECT_ID        := :old.SUBJECT_ID;
		  oldrec.STUDY_ID          := :old.STUDY_ID;
		  oldrec.STATUS_ID         := :old.STATUS_ID;
		  oldrec.ENROLLMENT_DATE   := :old.ENROLLMENT_DATE;
		  oldrec.DATE_CREATED      := :old.DATE_CREATED;
		  /*  -- */
		  /*  -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /*  -- */
		  clinica_table_api.study_subject_trigger(trg_operation, newrec, oldrec);
		end;
	     /* / */

		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-155">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger SUBJECT_GRP_MAP_INSERT_UPDATE on table SUBJECT_GROUP_MAP
		 -- */

		CREATE OR REPLACE TRIGGER subject_grp_map_insert_update
		    AFTER INSERT OR UPDATE ON subject_group_map
		    FOR EACH ROW
		declare
		  trg_operation  varchar2(10);
		  newrec         subject_group_map%rowtype;
		  oldrec         subject_group_map%rowtype;
		begin
		  /*  -- */
		  newrec.SUBJECT_GROUP_MAP_ID := :new.SUBJECT_GROUP_MAP_ID;
		  newrec.STUDY_GROUP_CLASS_ID := :new.STUDY_GROUP_CLASS_ID;
		  newrec.STUDY_SUBJECT_ID     := :new.STUDY_SUBJECT_ID;
		  newrec.STUDY_GROUP_ID       := :new.STUDY_GROUP_ID;
		  newrec.STATUS_ID            := :new.STATUS_ID;
		  newrec.OWNER_ID             := :new.OWNER_ID;
		  newrec.DATE_CREATED         := :new.DATE_CREATED;
		  newrec.DATE_UPDATED         := :new.DATE_UPDATED;
		  newrec.UPDATE_ID            := :new.UPDATE_ID;
		  newrec.NOTES                := :new.NOTES;
		  /*  -- */
		  oldrec.SUBJECT_GROUP_MAP_ID := :old.SUBJECT_GROUP_MAP_ID;
		  oldrec.STUDY_GROUP_CLASS_ID := :old.STUDY_GROUP_CLASS_ID;
		  oldrec.STUDY_SUBJECT_ID     := :old.STUDY_SUBJECT_ID;
		  oldrec.STUDY_GROUP_ID       := :old.STUDY_GROUP_ID;
		  oldrec.STATUS_ID            := :old.STATUS_ID;
		  oldrec.OWNER_ID             := :old.OWNER_ID;
		  oldrec.DATE_CREATED         := :old.DATE_CREATED;
		  oldrec.DATE_UPDATED         := :old.DATE_UPDATED;
		  oldrec.UPDATE_ID            := :old.UPDATE_ID;
		  oldrec.NOTES                := :old.NOTES;
		  /*  -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /*  -- */
		  clinica_table_api.subject_grp_assign_trigger(trg_operation, newrec, oldrec);
		end;
		/* / */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-98">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger REPEATING_DATA_INSERT on table ITEM_DATA
		 -- */

		CREATE OR REPLACE TRIGGER repeating_data_insert
		    AFTER INSERT ON item_data
		    FOR EACH ROW
		declare
		  trg_operation  varchar2(10);
		  newrec         item_data%rowtype;
		  oldrec         item_data%rowtype;
		begin
		  /*  -- */
		  newrec.ITEM_DATA_ID := :new.ITEM_DATA_ID;
		  newrec.ITEM_ID      := :new.ITEM_ID;
		  newrec.EVENT_CRF_ID := :new.EVENT_CRF_ID;
		  newrec.STATUS_ID    := :new.STATUS_ID;
		  newrec.VALUE        := :new.VALUE;
		  newrec.DATE_CREATED := :new.DATE_CREATED;
		  newrec.DATE_UPDATED := :new.DATE_UPDATED;
		  newrec.OWNER_ID     := :new.OWNER_ID;
		  newrec.UPDATE_ID    := :new.UPDATE_ID;
		  newrec.ORDINAL      := :new.ORDINAL; 
		  /*  -- */
		  oldrec.ITEM_DATA_ID := :old.ITEM_DATA_ID;
		  oldrec.ITEM_ID      := :old.ITEM_ID;
		  oldrec.EVENT_CRF_ID := :old.EVENT_CRF_ID;
		  oldrec.STATUS_ID    := :old.STATUS_ID;
		  oldrec.VALUE        := :old.VALUE;
		  oldrec.DATE_CREATED := :old.DATE_CREATED;
		  oldrec.DATE_UPDATED := :old.DATE_UPDATED;
		  oldrec.OWNER_ID     := :old.OWNER_ID;
		  oldrec.UPDATE_ID    := :old.UPDATE_ID;
		  oldrec.ORDINAL      := :old.ORDINAL; 
		  /*  -- */
		  /*  -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /*  -- */
		  clinica_table_api.repeating_item_data_trigger(trg_operation, newrec, oldrec);
		  /*  -- */
		end;
	     /* / */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-99">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Creating triggers to support default value assignment for PKs
		prompt
		  -- */

		/*  -- 
		prompt Create trigger ARCHIVED_DATASET_FILE_BEF_TRG on table ARCHIVED_DATASET_FILE
		  -- */

		create or replace trigger archived_dataset_file_bef_trg
		  before insert on archived_dataset_file
		  for each row
		begin
		  if :new.archived_dataset_file_id is null then
		    select archived_dataset_file_id_seq.nextval
		      into :new.archived_dataset_file_id
		      from dual;
		  end if;
		end;
	     /* / */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-100">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger AUDIT_EVENT_BEF_TRG on table AUDIT_EVENT
		  -- */

		create or replace trigger audit_event_bef_trg
		  before insert on audit_event
		  for each row
		begin
		  if :new.audit_id is null then
		    select audit_id_seq.nextval
		      into :new.audit_id
		      from dual;
		  end if;
		end;
	     /* / */

		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-101">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger AUDIT_LOG_EVENT_BEF_TRG on table AUDIT_LOG_EVENT
		  -- */

		create or replace trigger audit_log_event_bef_trg
		  before insert on audit_log_event
		  for each row
		begin
		  if :new.audit_id is null then
		    select audit_log_event_audit_id_seq.nextval
		      into :new.audit_id
		      from dual;
		  end if;
		end;
	     /* / */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-102">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger CRF_BEF_TRG on table DATASET
		  -- */

		create or replace trigger crf_bef_trg
		  before insert on crf
		  for each row
		begin
		  if :new.crf_id is null then
		    select crf_id_seq.nextval
		      into :new.crf_id
		      from dual;
		  end if;
		end;
	     /* / */

		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-103">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  --
		prompt Create trigger CRF_VERSION_BEF_TRG on table DATASET
		  -- */

		create or replace trigger crf_version_bef_trg
		  before insert on crf_version
		  for each row
		begin
		  if :new.crf_version_id is null then
		    select crf_version_id_seq.nextval
		      into :new.crf_version_id
		      from dual;
		  end if;
		end;
		/* / */

		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-104">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger DATASET_BEF_TRG on table DATASET
		 -- */

		create or replace trigger dataset_bef_trg
		  before insert on dataset
		  for each row
		begin
		  if :new.dataset_id is null then
		    select dataset_id_seq.nextval
		      into :new.dataset_id
		      from dual;
		  end if;
		end;
		/* / */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-105">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger DC_COMPUTED_EVENT_BEF_TRG on table DC_COMPUTED_EVENT
		  -- */

		create or replace trigger dc_computed_event_bef_trg
		  before insert on dc_computed_event
		  for each row
		begin
		  if :new.dc_summary_event_id is null then
		    select dc_summary_event_id_seq.nextval
		      into :new.dc_summary_event_id
		      from dual;
		  end if;
		end;
		/* / */

		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-106">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger DC_EVENT_BEF_TRG on table DC_EVENT
		  -- */

		create or replace trigger dc_event_bef_trg
		  before insert on dc_event
		  for each row
		begin
		  if :new.dc_event_id is null then
		    select dc_event_id_seq.nextval
		      into :new.dc_event_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-107">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger DC_PRIMITIVE_BEF_TRG on table DC_PRIMITIVE
		  -- */

		create or replace trigger dc_primitive_bef_trg
		  before insert on dc_primitive
		  for each row
		begin
		  if :new.dc_primitive_id is null then
		    select dc_primitive_id_seq.nextval
		      into :new.dc_primitive_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-108">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger DC_SECTION_EVENT_BEF_TRG on table DC_SECTION_EVENT
		  -- */

		create or replace trigger dc_section_event_bef_trg
		  before insert on dc_section_event
		  for each row
		begin
		  if :new.dc_event_id is null then
		    select dc_section_event_id_seq.nextval
		      into :new.dc_event_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-109">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger DC_SEND_EMAIL_EVENT_BEF_TRG on table DC_SEND_EMAIL_EVENT
		  -- */

		create or replace trigger dc_send_email_event_bef_trg
		  before insert on dc_send_email_event
		  for each row
		begin
		  if :new.dc_event_id is null then
		    select dc_send_email_event_id_seq.nextval
		      into :new.dc_event_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-110">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger DC_SUBSTITUTION_EVENT_BEF_TRG on table DC_SUBSTITUTION_EVENT
		  -- */

		create or replace trigger dc_substitution_event_bef_trg
		  before insert on dc_substitution_event
		  for each row
		begin
		  if :new.dc_event_id is null then
		    select dc_substitution_event_id_seq.nextval
		      into :new.dc_event_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-111">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger DECISION_CONDITION_BEF_TRG on table DECISION_CONDITION
		  -- */

		create or replace trigger decision_condition_bef_trg
		  before insert on decision_condition
		  for each row
		begin
		  if :new.decision_condition_id is null then
		    select decision_condition_id_seq.nextval
		      into :new.decision_condition_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-112">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger DISCREPANCY_NOTE_BEF_TRG on table DISCREPANCY_NOTE
		  -- */

		create or replace trigger discrepancy_note_bef_trg
		  before insert on discrepancy_note
		  for each row
		begin
		  if :new.discrepancy_note_id is null then
		    select discrepancy_note_id_seq.nextval
		      into :new.discrepancy_note_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-113">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger DISCREPANCY_NOTE_TYPE_BEF_TRG on table DISCREPANCY_NOTE_TYPE
		 -- */

		create or replace trigger discrepancy_note_type_bef_trg
		  before insert on discrepancy_note_type
		  for each row
		begin
		  if :new.discrepancy_note_type_id is null then
		    select discrepancy_note_type_id_seq.nextval
		      into :new.discrepancy_note_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-380">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger EVENT_CRF_BEF_TRG on table EVENT_CRF
		  -- */

		create or replace trigger event_crf_bef_trg
		  before insert on event_crf
		  for each row
		begin
		  if :new.event_crf_id is null then
		    select event_crf_id_seq.nextval
		      into :new.event_crf_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-114">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  --
		prompt Create trigger EVENT_DEFINITION_CRF_BEF_TRG on table EVENT_DEFINITION_CRF
		 -- */

		create or replace trigger event_definition_crf_bef_trg
		  before insert on event_definition_crf
		  for each row
		begin
		  if :new.event_definition_crf_id is null then
		    select event_definition_crf_id_seq.nextval
		      into :new.event_definition_crf_id
		      from dual;
		  end if;
		end;
		/* / */
		</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-115">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger EXPORT_FORMAT_BEF_TRG on table EXPORT_FORMAT
		 -- */

		create or replace trigger export_format_bef_trg
		  before insert on export_format
		  for each row
		begin
		  if :new.export_format_id is null then
		    select export_format_id_seq.nextval
		      into :new.export_format_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-116">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger FILTER_BEF_TRG on table FILTER
		 -- */

		create or replace trigger filter_bef_trg
		  before insert on filter
		  for each row
		begin
		  if :new.filter_id is null then
		    select filter_id_seq.nextval
		      into :new.filter_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-117">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger GROUP_CLASS_TYPES_BEF_TRG on table GROUP_CLASS_TYPES
		  -- */

		create or replace trigger group_class_types_bef_trg
		  before insert on group_class_types
		  for each row
		begin
		  if :new.group_class_type_id is null then
		    select group_class_type_id_seq.nextval
		      into :new.group_class_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-118">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger ITEM_DATA_BEF_TRG on table ITEM_DATA
		  -- */

		create or replace trigger item_data_bef_trg
		  before insert on item_data
		  for each row
		begin
		  if :new.item_data_id is null then
		    select item_data_id_seq.nextval
		      into :new.item_data_id
		      from dual;
		  end if;
		end;
		/* / */


	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-119">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger ITEM_DATA_TYPE_BEF_TRG on table ITEM_DATA_TYPE
		  -- */

		create or replace trigger item_data_type_bef_trg
		  before insert on item_data_type
		  for each row
		begin
		  if :new.item_data_type_id is null then
		    select item_data_type_id_seq.nextval
		      into :new.item_data_type_id
		      from dual;
		  end if;
		end;
		/* / */
	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-120">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger ITEM_FORM_METADATA_BEF_TRG on table ITEM_FORM_METADATA
		  -- */

		create or replace trigger item_form_metadata_bef_trg
		  before insert on item_form_metadata
		  for each row
		begin
		  if :new.item_form_metadata_id is null then
		    select item_form_metadata_id_seq.nextval
		      into :new.item_form_metadata_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-388">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger ITEM_GROUP_BEF_TRG on table ITEM_GROUP
		 -- */

		create or replace trigger item_group_bef_trg
		  before insert on item_group
		  for each row
		begin
		  if :new.item_group_id is null then
		    select item_group_id_seq.nextval
		      into :new.item_group_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-121">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger ITEM_GROUP_METADATA_BEF_TRG on table ITEM_GROUP_METADATA
		  -- */

		create or replace trigger item_group_metadata_bef_trg
		  before insert on item_group_metadata
		  for each row
		begin
		  if :new.item_group_metadata_id is null then
		    select item_group_metadata_id_seq.nextval
		      into :new.item_group_metadata_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-122">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger ITEM_BEF_TRG on table ITEM
		  -- */

		create or replace trigger item_bef_trg
		  before insert on item
		  for each row
		begin
		  if :new.item_id is null then
		    select item_id_seq.nextval
		      into :new.item_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-123">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger ITEM_REFERENCE_TYPE_BEF_TRG on table ITEM_REFERENCE_TYPE
		  -- */

		create or replace trigger item_reference_type_bef_trg
		  before insert on item_reference_type
		  for each row
		begin
		  if :new.item_reference_type_id is null then
		    select item_reference_type_id_seq.nextval
		      into :new.item_reference_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-124">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger NULL_VALUE_TYPE_BEF_TRG on table NULL_VALUE_TYPE
		 -- */

		create or replace trigger null_value_type_bef_trg
		  before insert on null_value_type
		  for each row
		begin
		  if :new.null_value_type_id is null then
		    select null_value_type_id_seq.nextval
		      into :new.null_value_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-125">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger PRIVILEGE_BEF_TRG on table PRIVILEGE
		 -- */

		create or replace trigger privilege_bef_trg
		  before insert on privilege
		  for each row
		begin
		  if :new.priv_id is null then
		    select priv_id_seq.nextval
		      into :new.priv_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-126">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger RESOLUTION_STATUS_BEF_TRG on table RESOLUTION_STATUS
		  -- */

		create or replace trigger resolution_status_bef_trg
		  before insert on resolution_status
		  for each row
		begin
		  if :new.resolution_status_id is null then
		    select resolution_status_id_seq.nextval
		      into :new.resolution_status_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-127">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger RESPONSE_SET_BEF_TRG on table RESPONSE_SET
		 -- */

		create or replace trigger response_set_bef_trg
		  before insert on response_set
		  for each row
		begin
		  if :new.response_set_id is null then
		    select response_set_id_seq.nextval
		      into :new.response_set_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-128">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger RESPONSE_TYPE_BEF_TRG on table RESPONSE_TYPE
		  -- */

		create or replace trigger response_type_bef_trg
		  before insert on response_type
		  for each row
		begin
		  if :new.response_type_id is null then
		    select response_type_id_seq.nextval
		      into :new.response_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-129">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger SECTION_BEF_TRG on table SECTION
		 -- */

		create or replace trigger section_bef_trg
		  before insert on section
		  for each row
		begin
		  if :new.section_id is null then
		    select section_id_seq.nextval
		      into :new.section_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-130">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STATUS_BEF_TRG on table STATUS
		  -- */

		create or replace trigger status_bef_trg
		  before insert on status
		  for each row
		begin
		  if :new.status_id is null then
		    select status_id_seq.nextval
		      into :new.status_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-131">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STUDY_EVENT_DEFINITION_BEF_TRG on table STUDY_EVENT_DEFINITION
		 -- */

		create or replace trigger study_event_definition_bef_trg
		  before insert on study_event_definition
		  for each row
		begin
		  if :new.study_event_definition_id is null then
		    select study_event_definition_id_seq.nextval
		      into :new.study_event_definition_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-132">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STUDY_EVENT_BEF_TRG on table STUDY_EVENT
		 -- */

		create or replace trigger study_event_bef_trg
		  before insert on study_event
		  for each row
		begin
		  if :new.study_event_id is null then
		    select study_event_id_seq.nextval
		      into :new.study_event_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-133">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STUDY_GROUP_CLASS_BEF_TRG on table STUDY_GROUP_CLASS
		  -- */

		create or replace trigger study_group_class_bef_trg
		  before insert on study_group_class
		  for each row
		begin
		  if :new.study_group_class_id is null then
		    select study_group_class_id_seq.nextval
		      into :new.study_group_class_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-134">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STUDY_GROUP_BEF_TRG on table STUDY_GROUP
		  -- */

		create or replace trigger study_group_bef_trg
		  before insert on study_group
		  for each row
		begin
		  if :new.study_group_id is null then
		    select study_group_id_seq.nextval
		      into :new.study_group_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>    	
	<changeSet author="pgawade (generated)" id="1235684743487-135">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger STUDY_PARAMETER_BEF_TRG on table STUDY_PARAMETER
		  -- */

		create or replace trigger study_parameter_bef_trg
		  before insert on study_parameter
		  for each row
		begin
		  if :new.study_parameter_id is null then
		    select study_parameter_id_seq.nextval
		      into :new.study_parameter_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>    	
	<changeSet author="pgawade (generated)" id="1235684743487-136">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STUDY_PARAMETER_VALUE_BEF_TRG on table STUDY_PARAMETER_VALUE
		  -- */

		create or replace trigger study_parameter_value_bef_trg
		  before insert on study_parameter_value
		  for each row
		begin
		  if :new.study_parameter_value_id is null then
		    select study_parameter_value_id_seq.nextval
		      into :new.study_parameter_value_id
		      from dual;
		  end if;
		end;
		/* / */


	</sql>
	</changeSet>  
	<changeSet author="pgawade (generated)" id="1235684743487-137">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger STUDY_BEF_TRG on table STUDY
		 -- */

		create or replace trigger study_bef_trg
		  before insert on study
		  for each row
		begin
		  if :new.study_id is null then
		    select study_id_seq.nextval
		      into :new.study_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>  
	<changeSet author="pgawade (generated)" id="1235684743487-138">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger STUDY_SUBJECT_BEF_TRG on table STUDY_SUBJECT
		 -- */

		create or replace trigger study_subject_bef_trg
		  before insert on study_subject
		  for each row
		begin
		  if :new.study_subject_id is null then
		    select study_subject_id_seq.nextval
		      into :new.study_subject_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet> 
	<changeSet author="pgawade (generated)" id="1235684743487-139">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger STUDY_TYPE_BEF_TRG on table STUDY_TYPE
		 -- */

		create or replace trigger study_type_bef_trg
		  before insert on study_type
		  for each row
		begin
		  if :new.study_type_id is null then
		    select study_type_id_seq.nextval
		      into :new.study_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>    	
	<changeSet author="pgawade (generated)" id="1235684743487-140">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger SUBJECT_EVENT_STATUS_BEF_TRG on table SUBJECT_EVENT_STATUS
		 -- */

		create or replace trigger subject_event_status_bef_trg
		  before insert on subject_event_status
		  for each row
		begin
		  if :new.subject_event_status_id is null then
		    select subject_event_status_id_seq.nextval
		      into :new.subject_event_status_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>    
	<changeSet author="pgawade (generated)" id="1235684743487-141">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger SUBJECT_GROUP_MAP_BEF_TRG on table SUBJECT_GROUP_MAP
		  -- */

		create or replace trigger subject_group_map_bef_trg
		  before insert on subject_group_map
		  for each row
		begin
		  if :new.subject_group_map_id is null then
		    select subject_group_map_id_seq.nextval
		      into :new.subject_group_map_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>   
	<changeSet author="pgawade (generated)" id="1235684743487-142">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger SUBJECT_BEF_TRG on table SUBJECT
		  -- */

		create or replace trigger subject_bef_trg
		  before insert on subject
		  for each row
		begin
		  if :new.subject_id is null then
		    select subject_id_seq.nextval
		      into :new.subject_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>  
	<changeSet author="pgawade (generated)" id="1235684743487-143">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  --
		prompt Create trigger USER_ACCOUNT_BEF_TRG on table USER_ACCOUNT
		  -- */

		create or replace trigger user_account_bef_trg
		  before insert on user_account
		  for each row
		begin
		  if :new.user_id is null then
		    select user_id_seq.nextval
		      into :new.user_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-144">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger USER_ROLE_BEF_TRG on table USER_ROLE
		  -- */

		create or replace trigger user_role_bef_trg
		  before insert on user_role
		  for each row
		begin
		  if :new.role_id is null then
		    select role_id_seq.nextval
		      into :new.role_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>  
	<changeSet author="pgawade (generated)" id="1235684743487-145">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger USER_TYPE_BEF_TRG on table USER_TYPE
		  -- */

		create or replace trigger user_type_bef_trg
		  before insert on user_type
		  for each row
		begin
		  if :new.user_type_id is null then
		    select user_type_id_seq.nextval
		      into :new.user_type_id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>    
	<changeSet author="pgawade (generated)" id="1235684743487-146">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger RULE_BEF_TRG on table RULE
		  -- */

		create or replace trigger rule_bef_trg
		  before insert on RULE
		  for each row
		begin
		  if :new.id is null then
		    select rule_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet> 
	<changeSet author="pgawade (generated)" id="1235684743487-147">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger RULE_SET_BEF_TRG on table RULE_SET
		 -- */

		create or replace trigger rule_set_bef_trg
		  before insert on RULE_SET
		  for each row
		begin
		  if :new.id is null then
		    select rule_set_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet> 
	<changeSet author="pgawade (generated)" id="1235684743487-148">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		/*  -- 
		prompt Create trigger RULE_SET_AUDIT_BEF_TRG on table RULE_SET_AUDIT
		 -- */

		create or replace trigger rule_set_audit_bef_trg
		  before insert on RULE_SET_AUDIT
		  for each row
		begin
		  if :new.id is null then
		    select rule_set_audit_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */

	</sql>
	</changeSet>  
	<changeSet author="pgawade (generated)" id="1235684743487-149">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  --
		prompt Create trigger RULE_SET_RULE_BEF_TRG on table RULE_SET_RULE
		  -- */

		create or replace trigger rule_set_rule_bef_trg
		  before insert on RULE_SET_RULE
		  for each row
		begin
		  if :new.id is null then
		    select rule_set_rule_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */


		</sql>
	</changeSet> 
	<changeSet author="pgawade (generated)" id="1235684743487-150">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger RULE_SET_RULE_AUDIT_BEF_TRG on table RULE_SET_RULE_AUDIT
		  -- */

		create or replace trigger rule_set_rule_audit_bef_trg
		  before insert on RULE_SET_RULE_AUDIT
		  for each row
		begin
		  if :new.id is null then
		    select rule_set_rule_audit_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */

		</sql>
	</changeSet> 
	<changeSet author="pgawade (generated)" id="1235684743487-151">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger RULE_ACTION_BEF_TRG on table RULE_ACTION
		 -- */

		create or replace trigger rule_action_bef_trg
		  before insert on RULE_ACTION
		  for each row
		begin
		  if :new.id is null then
		    select rule_action_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */

		</sql>
	</changeSet> 
	<changeSet author="pgawade (generated)" id="1235684743487-152">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
		<sql splitStatements="false">
			/*  -- 
		prompt Create trigger RULE_EXPRESSION_BEF_TRG on table RULE_EXPRESSION
		  -- */

		create or replace trigger rule_expression_bef_trg
		  before insert on RULE_EXPRESSION
		  for each row
		begin
		  if :new.id is null then
		    select rule_expression_id_seq.nextval
		      into :new.id
		      from dual;
		  end if;
		end;
		/* / */

		</sql>
	</changeSet>    	
	<!-- packages -->
	<changeSet author="pgawade (generated)" id="1235684743487-373">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
	CREATE OR REPLACE package clinica_table_api is

		procedure event_crf_trigger(
		      tg_op varchar2
		     ,newrec  in out event_crf%rowtype
		     ,oldrec event_crf%rowtype default null
		   );


		procedure global_subject_trigger(
		      tg_op varchar2
		     ,newrec  in out subject%rowtype
		     ,oldrec subject%rowtype default null
		   );



		procedure item_data_trigger(
		      tg_op varchar2
		     ,newrec  in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   );


		procedure study_subject_trigger(
		      tg_op varchar2
		     ,newrec  in out study_subject%rowtype
		     ,oldrec study_subject%rowtype default null
		   );


		procedure study_event_trigger(
		      tg_op varchar2
		     ,newrec in out study_event%rowtype
		     ,oldrec study_event%rowtype default null
		   );


		procedure subject_grp_assign_trigger(
		      tg_op varchar2
		     ,newrec in out subject_group_map%rowtype
		     ,oldrec subject_group_map%rowtype default null
		   );


		procedure repeating_item_data_trigger(
		      tg_op varchar2
		     ,newrec in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   );

		end;
		/* / */

	</sql>
	</changeSet>
	<changeSet author="pgawade (generated)" id="1235684743487-374" runOnChange="true">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>	
	<sql splitStatements="false">
		CREATE OR REPLACE package body clinica_table_api is

		procedure event_crf_trigger(
		      tg_op varchar2
		     ,newrec in out event_crf%rowtype
		     ,oldrec event_crf%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		BEGIN
		    IF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
		       /* --------------- */
		       /* --Event CRF status changed */
			entity_name_value := 'Status';
			 /* -- */
			IF (nvl(OLDREC.status_id, '-1') = '1' AND nvl(NEWREC.status_id, '-1') = '2') THEN
			    /* -- */
				    IF (NEWREC.electronic_signature_status = '1') THEN
			      event_type_id := '14';
			    ELSE
			      event_type_id := '8';
			    END IF;
			    /* -- */
			ELSIF (nvl(OLDREC.status_id, '-1') = '1' AND nvl(NEWREC.status_id, '-1') = '4') THEN
			    /* -- */
				    IF (NEWREC.electronic_signature_status = '1') THEN
			      event_type_id := '15';
			    ELSE
			      event_type_id := '10';
			    END IF;
			    /* -- */
			ELSIF (nvl(OLDREC.status_id, '-1') = '4' AND nvl(NEWREC.status_id, '-1') = '2') THEN
			    /* -- */
				    IF (NEWREC.electronic_signature_status = '1') THEN
			      event_type_id := '16';
			    ELSE
			      event_type_id := '11';
			    END IF;
			    /* -- */
			END IF;
			/* -- */
			if event_type_id is not null then
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.status_id,
				NEWREC.status_id,
				NEWREC.event_crf_id
			      );
			END IF;
		       END IF;

			IF (nvl(OLDREC.date_interviewed, '01-JAN-1000') <![CDATA[<>]]> nvl(NEWREC.date_interviewed, '01-JAN-1000')) THEN
			  /* -- Event CRF date interviewed */
			  entity_name_value := 'Date interviewed';
			  event_type_id := '9';
			  /* -- */
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.date_interviewed,
				NEWREC.date_interviewed,
				NEWREC.event_crf_id
			      );
			END IF;

			IF((nvl(OLDREC.interviewer_name, ' ') <![CDATA[<>]]> nvl(NEWREC.interviewer_name, ' ')) AND (OLDREC.interviewer_name is not null)) THEN
			  /* -- Event CRF interviewer name */
			  entity_name_value := 'Interviewer Name';
			  event_type_id := '9';
			  /* -- */
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.interviewer_name,
				NEWREC.interviewer_name,
				NEWREC.event_crf_id
			      );
			END IF;
		   
		    IF(OLDREC.sdv_status <![CDATA[<>]]> NEWREC.sdv_status) THEN
			  entity_name_value := 'EventCRF SDV Status';
			  event_type_id := '32';
			  /* -- */
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.sdv_update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.sdv_status,
				NEWREC.sdv_status,
				NEWREC.event_crf_id
			      );
			END IF;
		    END IF;
		END;
		 /* -------------------------------------------------------------------------------- */



		procedure global_subject_trigger(
		      tg_op varchar2
		     ,newrec in out subject%rowtype
		     ,oldrec subject%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		BEGIN
		    --
		    IF (TG_OP = 'INSERT') THEN
			/* --------------- */
			/* --Subject created */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id)
			    VALUES (audit_log_event_audit_id_seq.nextval, '5', sysdate, NEWREC.owner_id, 'subject', NEWREC.subject_id);
			/* --------------- */
		    ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
		       /*  --Subject status changed */
			entity_name_value  := 'Status';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '6', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.status_id, NEWREC.status_id);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.unique_identifier, '-1') <![CDATA[<>]]> nvl(NEWREC.unique_identifier, '-1')) THEN
			/* --------------- */
			/*  --Subject status changed */
			entity_name_value  := 'Person ID';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '7', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.unique_identifier, NEWREC.unique_identifier);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.date_of_birth, '01-JAN-1000') <![CDATA[<>]]> nvl(NEWREC.date_of_birth, '01-JAN-1000')) THEN
			/* --------------- */
			/*  --Subject status changed */
			entity_name_value  := 'Date of Birth';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '7', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.date_of_birth, NEWREC.date_of_birth);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.gender, '-1') <![CDATA[<>]]> nvl(NEWREC.gender, '-1')) THEN
			/* --------------- */
			/*  --Subject status changed */
			entity_name_value  := 'Gender';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '7', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.gender, NEWREC.gender);
			/* --------------- */
			END IF;

		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure item_data_trigger(
		      tg_op varchar2
		     ,newrec in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		std_evnt_id INTEGER;
		crf_version_id INTEGER;
		luser_id  audit_log_event.user_id%type;
		/* -- */
		BEGIN
		    /* -- */
		    IF (TG_OP = 'DELETE') THEN
			/* --------------- */
		       /*  --Item data deleted (by deleting an event crf) */
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = OLDREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			begin
			  SELECT ec.study_event_id
			    INTO std_evnt_id
			    FROM event_crf ec 
			   WHERE ec.event_crf_id = OLDREC.event_crf_id;
			  /* -- */
			exception
			  when others then
			    std_evnt_id := null;
			end;
			/* -- */
			begin
			  SELECT ec.crf_version_id 
			    INTO crf_version_id 
			    FROM event_crf ec
			   WHERE ec.event_crf_id = OLDREC.event_crf_id;
			exception
			  when others then
			    crf_version_id := null;
			end;
			/* -- */
				IF (OLDREC.update_id <![CDATA[<]]>1) THEN
			  luser_id := oldrec.update_id;
			else
			  luser_id := oldrec.owner_id;
			end if;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id,study_event_id,event_crf_version_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '13', sysdate, luser_id, 'item_data', OLDREC.item_data_id, entity_name_value, OLDREC.value, OLDREC.event_crf_id,std_evnt_id,crf_version_id);

			ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
			/* --Item data status changed (by removing an event crf)*/
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = NEWREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.value, ' ') <![CDATA[<>]]> nvl(NEWREC.value, ' ')) THEN
			/* --------------- */
			/* --Item data updated */
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = NEWREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '1', sysdate, NEWREC.update_id, 'item_data', NEWREC.item_data_id, entity_name_value, OLDREC.value, NEWREC.value, NEWREC.event_crf_id);
			/* --------------- */
			END IF;
		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure study_subject_trigger(
		      tg_op varchar2
		     ,newrec in out study_subject%rowtype
		     ,oldrec study_subject%rowtype default null
		   ) is
		event_type_id         varchar2(10) := null;
		entity_name_value     varchar2(200);
		old_unique_identifier varchar2(200);
		new_unique_identifier varchar2(200);
		BEGIN
		    /* -- */
		    IF (TG_OP = 'INSERT') THEN
			/* --------------- */
		       /* --Study subject created */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id)
			    VALUES (audit_log_event_audit_id_seq.nextval,'2', sysdate, NEWREC.owner_id, 'study_subject', NEWREC.study_subject_id);
			/* --------------- */
		    ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
			/* --Study subject status changed */
			entity_name_value := 'Status';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'3', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.status_id, NEWREC.status_id);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.label, ' ') <![CDATA[<>]]> nvl(NEWREC.label, ' ')) THEN
			/* --------------- */
			/* --Study subject value changed */
			entity_name_value := 'Study Subject ID';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'4', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.label, NEWREC.label);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.secondary_label, ' ') <![CDATA[<>]]> nvl(NEWREC.secondary_label, ' ')) THEN
			/* --------------- */
			/* --Study subject value changed */
			entity_name_value := 'Secondary Subject ID';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'4', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.secondary_label, NEWREC.secondary_label);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.enrollment_date, '01-JAN-1000') <![CDATA[<>]]> nvl(NEWREC.enrollment_date, '01-JAN-1000')) THEN
			/* --------------- */
			/* --Study subject value changed */
			entity_name_value := 'Enrollment Date';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'4', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.enrollment_date, NEWREC.enrollment_date);
			/* --------------- */
			END IF;

			IF (nvl(OLDREC.study_id, -1) <![CDATA[<>]]> nvl(NEWREC.study_id, -1) ) THEN
			  /* --------------- */
			 /* --Subject reassigned */
			  entity_name_value := 'Study id';
			  /* -- */
			  begin
			    SELECT study.unique_identifier
			      INTO old_unique_identifier  
			      FROM study study 
			     WHERE study.study_id = OLDREC.study_id;
			  exception
			     when others then
			       old_unique_identifier := null;
			  end;
			  /* -- */
			  begin
			    SELECT study.unique_identifier
			      INTO new_unique_identifier  
			      FROM study study
			     WHERE study.study_id = NEWREC.study_id;
			  exception
			     when others then
			       new_unique_identifier := null;
			  end;
			  /* -- */
			  INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '27', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, old_unique_identifier, new_unique_identifier);
			  /* --------------- */
			END IF;

		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure study_event_trigger(
		      tg_op varchar2
		     ,newrec in out study_event%rowtype
		     ,oldrec study_event%rowtype default null
		   ) is
		event_type_id         varchar2(10) := null;
		entity_name_value     varchar2(200);
		begin   
			IF (TG_OP = 'INSERT') THEN

			IF(NEWREC.subject_event_status_id = '1') THEN
			  event_type_id := '17';
			  entity_name_value := 'Status';
			  /* -- */            
			  INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			  VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.owner_id, 'study_event', NEWREC.study_event_id, entity_name_value, '0', NEWREC.subject_event_status_id);
			END IF;
		    END IF;
		    /* -- */
			IF (TG_OP = 'UPDATE') THEN
				IF(OLDREC.subject_event_status_id <![CDATA[<>]]> NEWREC.subject_event_status_id) THEN
			  entity_name_value := 'Status';
			  /* -- */            
			    IF(NEWREC.subject_event_status_id = '1') THEN
			      event_type_id := '17';
			    ELSIF(NEWREC.subject_event_status_id = '3') THEN
			      event_type_id := '18';
			    ELSIF(NEWREC.subject_event_status_id = '4') THEN
			      event_type_id := '19';
			    ELSIF(NEWREC.subject_event_status_id = '5') THEN
			      event_type_id := '20';
			    ELSIF(NEWREC.subject_event_status_id = '6') THEN
			      event_type_id := '21';
			    ELSIF(NEWREC.subject_event_status_id = '7') THEN
			      event_type_id := '22';
			    ELSIF(NEWREC.subject_event_status_id = '8') THEN
			      event_type_id := '31';
				    END IF;
			    /* -- */
			    INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.subject_event_status_id, NEWREC.subject_event_status_id);
			    /* -- */
			    END IF;
			IF(OLDREC.status_id <![CDATA[<>]]> NEWREC.status_id) THEN
			    IF(NEWREC.status_id = '5') THEN
			      /* -- */
			      entity_name_value := 'Status';
			      event_type_id := '23';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.status_id, NEWREC.status_id);
			      /* -- */
			    END IF;
			END IF;
			IF(OLDREC.date_start <![CDATA[<>]]> NEWREC.date_start) THEN
			      /* -- */
			      entity_name_value := 'Start date';
			      event_type_id := '24';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.date_start, NEWREC.date_start);
			      /* -- */
			END IF;
			IF(OLDREC.date_end <![CDATA[<>]]> NEWREC.date_end) THEN
			      /* -- */
			      entity_name_value := 'End date';
			      event_type_id := '25';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.date_end, NEWREC.date_end);
			      /* -- */
			END IF;
			/* IF(OLDREC."location" <![CDATA[<>]]> NEWREC."location") THEN */
			IF(OLDREC.location <![CDATA[<>]]> NEWREC.location) THEN
			      /* -- */
			      entity_name_value := 'Location';
			      event_type_id := '26';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      /*VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC."location", NEWREC."location");*/
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.location, NEWREC.location);
			      /* -- */
			END IF;

			END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure subject_grp_assign_trigger(
		      tg_op varchar2
		     ,newrec in out subject_group_map%rowtype
		     ,oldrec subject_group_map%rowtype default null
		   ) is
		/* -- */
		new_group_name study_group.name%type;
		old_group_name study_group.name%type;
		/* -- */
		begin   
		    IF (TG_OP = 'INSERT') THEN
			/* -- */
			begin
			  SELECT sg.name 
			    INTO new_group_name 
			    FROM study_group sg 
			   WHERE sg.study_group_id = NEWREC.study_group_id;
			exception
			   when no_data_found then
			     new_group_name := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (audit_log_event_audit_id_seq.nextval,  '28', sysdate, NEWREC.owner_id, 'subject_group_map', NEWREC.study_subject_id, 'Status','', new_group_name);
		      /* -- */
		    ELSIF (TG_OP = 'UPDATE') THEN

			IF nvl(OLDREC.study_group_id, -1) <![CDATA[<>]]> nvl(NEWREC.study_group_id, -1) THEN

			  begin
			    SELECT sg.name 
			      INTO old_group_name 
			      FROM study_group sg 
			     WHERE sg.study_group_id = OLDREC.study_group_id;
			  exception
			     when no_data_found then
			       old_group_name := null;
			  end;
			  /* -- */
			  begin
			    SELECT sg.name 
			      INTO new_group_name 
			      FROM study_group sg 
			     WHERE sg.study_group_id = NEWREC.study_group_id;
			  exception
			     when no_data_found then
			       new_group_name := null;
			  end;
			  /* -- */
			  INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			  VALUES (audit_log_event_audit_id_seq.nextval,  '29', sysdate, NEWREC.update_id, 'subject_group_map', NEWREC.study_subject_id, 'Status', old_group_name, new_group_name);
			END IF;
		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure repeating_item_data_trigger(
		      tg_op varchar2
		     ,newrec in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   ) is
		/* -- */
		std_evnt_id         event_crf.study_event_id%type;
		crf_version_id      event_crf.crf_version_id%type;
		validator_id        event_crf.validator_id%type;
		event_crf_status_id event_crf.status_id%type;
		entity_name_value   item.name%type;
		/* -- */
		begin   
		  /* -- */
		 IF (TG_OP = 'INSERT') THEN
		   /* -- */  
		    begin
		      SELECT item.name 
			INTO entity_name_value
			FROM item 
		       WHERE item.item_id = NEWREC.item_id;
		    exception
		      when no_data_found then
			entity_name_value := null;
		    end;
		    /* -- */
		    begin
		      SELECT ec.study_event_id,
			     ec.crf_version_id, 
			     ec.validator_id,
			     ec.status_id
			INTO 
			     std_evnt_id,
			     crf_version_id,
			     validator_id,
			     event_crf_status_id
			FROM event_crf ec 
		       WHERE ec.event_crf_id = NEWREC.event_crf_id;
		    exception
		      when no_data_found then
			std_evnt_id := null;
			crf_version_id := null;
			validator_id := null;
			event_crf_status_id := null;
		    end;
		    /* -- */
		    IF (nvl(NEWREC.status_id, -1) = '2' AND 
			nvl(NEWREC.ordinal, -1)<![CDATA[>]]>1 AND 
			nvl(validator_id, -1)<![CDATA[>]]>0 AND 
			nvl(event_crf_status_id, -1)  = '4') THEN /* -- DDE */
		      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, new_value, event_crf_id, study_event_id, event_crf_version_id)
		      VALUES (audit_log_event_audit_id_seq.nextval, '30', sysdate, NEWREC.owner_id, 'item_data', NEWREC.item_data_id, entity_name_value, NEWREC.value, NEWREC.event_crf_id, std_evnt_id, crf_version_id);
		    ELSE 
		    IF (nvl(NEWREC.status_id, -1) = '2' AND 
			nvl(NEWREC.ordinal, -1)<![CDATA[>]]>1 AND 
			nvl(event_crf_status_id, -1)  = '2') THEN /* -- ADE */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, new_value, event_crf_id, study_event_id, event_crf_version_id)
			VALUES (audit_log_event_audit_id_seq.nextval, '30', sysdate, NEWREC.owner_id, 'item_data', NEWREC.item_data_id, entity_name_value, NEWREC.value, NEWREC.event_crf_id, std_evnt_id, crf_version_id);
		      END IF;
		    END IF;
		  END IF;
		END;
		/* -------------------------------------------------------------------------------- */


		end;
		/* / */
	      /* show errors; */

	</sql>
	</changeSet>	
<!-- SEQUENCES -->
            <changeSet author="pgawade (generated)" id="1236096695424-291">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="ARCHIVED_DATASET_FILE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-292">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="AUDIT_EVENT_VAL_AUDIT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-293">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="AUDIT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-294">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="AUDIT_LOG_EVENT_AUDIT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-295">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="AUDIT_LOG_EVENT_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-296">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="COMPLETION_STATUS_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-297">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="CRF_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-298">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="CRF_VERSION_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-299">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="DATASET_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-300">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="DC_EVENT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-301">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>            
                <createSequence sequenceName="DC_PRIMITIVE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-302">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DC_SECTION_EVENT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-303">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DC_SEND_EMAIL_EVENT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-304">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DC_SUBSTITUTION_EVENT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-305">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DC_SUMMARY_EVENT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-306">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DECISION_CONDITION_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-307">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DISCREPANCY_NOTE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-308">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="DISCREPANCY_NOTE_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-309">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="EVENT_CRF_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-310">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="EVENT_DEFINITION_CRF_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-311">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="EXPORT_FORMAT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-312">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="FILTER_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-313">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="GROUP_CLASS_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-314">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_DATA_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-315">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_DATA_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-316">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_FORM_METADATA_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-317">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_GROUP_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-318">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_GROUP_METADATA_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-319">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-320">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ITEM_REFERENCE_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-321">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="NULL_VALUE_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-322">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="PRIV_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-323">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RESOLUTION_STATUS_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-324">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RESPONSE_SET_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-325">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RESPONSE_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-326">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="ROLE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-327">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_ACTION_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-328">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_EXPRESSION_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-329">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-330">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_SET_AUDIT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-331">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_SET_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-332">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_SET_RULE_AUDIT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-333">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="RULE_SET_RULE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-334">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="SECTION_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-335">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STATUS_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-336">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_EVENT_DEFINITION_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-337">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_EVENT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-338">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_GROUP_CLASS_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-339">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_GROUP_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-340">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-341">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_PARAMETER_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-342">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_PARAMETER_VALUE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-343">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_SUBJECT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-344">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="STUDY_TYPE_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-345">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="SUBJECT_EVENT_STATUS_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-346">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="SUBJECT_GROUP_MAP_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-347">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="SUBJECT_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-348">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="USER_ID_SEQ"/>
            </changeSet>
            <changeSet author="pgawade (generated)" id="1236096695424-349">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>             
                <createSequence sequenceName="USER_TYPE_ID_SEQ"/>
            </changeSet>
        <changeSet author="pgawade (generated)" id="1236096695424-350">
			<preConditions onFail="MARK_RAN">
				<dbms type="oracle" />			
	 		</preConditions>             
            <createSequence sequenceName="USAGE_STATISTICS_DATA_ID_SEQ"/>
       </changeSet>	
	   <changeSet author="pgawade (generated)" id="1236096695424-351">
			<preConditions onFail="MARK_RAN">
				<dbms type="oracle" />			
	 		</preConditions>             
            <createSequence sequenceName="OPENCLINICA_VERSION_ID_SEQ"/>
       </changeSet>
</databaseChangeLog>
