<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">         

<!-- Postgres database specific functions -->


 
 
 
 <changeSet author="htaycher " id="2011-10-03-11376-3" runOnChange="true">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>
    	 <sql splitStatements="false">
    	 	CREATE OR REPLACE FUNCTION event_crf_version_change_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			crf_old_name TEXT;
			crf_new_name TEXT;
			
		BEGIN
			IF (TG_OP = ''UPDATE'') THEN
				IF(OLD.crf_version_id <![CDATA[<>]]> NEW.crf_version_id) THEN
				 /*---------------*/

				    SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				   SELECT INTO crf_old_name cf.name FROM crf_version cf WHERE cf.crf_version_id = OLD.crf_version_id;
				    SELECT INTO crf_new_name cf.name FROM crf_version cf WHERE cf.crf_version_id = NEW.crf_version_id;
				    
				    
				    
				    
					INSERT INTO audit_log_event(  
					audit_id, 
					audit_date,  
					audit_table,  
					user_id ,
					entity_id ,
					entity_name ,
					audit_log_event_type_id ,
					old_value ,
					new_value ,
					event_crf_id ,
					study_event_id
					 )
				
					VALUES (
					pk, 
					now(),
					''event_crf'',
					OLD.update_id,
					OLD.event_crf_id, 
					''CRF version'',
					''33'',
					crf_old_name, 
					crf_new_name,
					OLD.event_crf_id,
					OLD.study_event_id
					);
				/*---------------*/
				END IF;
				RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		RETURN NULL;  /*return values ignored for ''after'' triggers*/
		END;
		'
		    LANGUAGE plpgsql;
    	 </sql>
    </changeSet>
    
   <changeSet author="htaycher " id="2011-10-03-11376-2">
    	<preConditions onFail="MARK_RAN">
	 	<dbms type="postgresql" />
		<!--<runningAs username="clinica" />-->
	</preConditions>     	 
    	 <sql splitStatements="false">
    	 	CREATE TRIGGER event_crf_update_1
		    AFTER UPDATE ON event_crf
		    FOR EACH ROW
		    EXECUTE PROCEDURE event_crf_version_change_trigger();
    	 </sql>
    </changeSet>

  <changeSet author="htaycher" id="2011-11-03-11376-9">
		<preConditions onFail="MARK_RAN">
			<dbms type="oracle" />			
	 	</preConditions>
		<sql splitStatements="false">
			/* --
		prompt Create trigger crf vesion update on table EVENT_CRF
		-- */

CREATE OR REPLACE TRIGGER crf_version_update
	    AFTER UPDATE ON event_crf
	    FOR EACH ROW
	declare
	 crf_old_name varchar2(255);
	  crf_new_name varchar2(255);
	newrec  event_crf%rowtype;
	oldrec  event_crf%rowtype;
	begin
	/* -- */
	newrec.EVENT_CRF_ID                := :new.EVENT_CRF_ID;
	newrec.STUDY_EVENT_ID              := :new.STUDY_EVENT_ID;
	newrec.CRF_VERSION_ID              := :new.CRF_VERSION_ID;
	newrec.DATE_COMPLETED              := :new.DATE_COMPLETED;
	newrec.OWNER_ID                    := :new.OWNER_ID;
	newrec.DATE_CREATED                := :new.DATE_CREATED;
	newrec.STUDY_SUBJECT_ID            := :new.STUDY_SUBJECT_ID;
	newrec.DATE_UPDATED                := :new.DATE_UPDATED;
	newrec.UPDATE_ID                   := :new.UPDATE_ID;
	/* -- */
	oldrec.EVENT_CRF_ID                := :old.EVENT_CRF_ID;
	oldrec.STUDY_EVENT_ID              := :old.STUDY_EVENT_ID;
	oldrec.CRF_VERSION_ID              := :old.CRF_VERSION_ID;
	oldrec.OWNER_ID                    := :old.OWNER_ID;
	oldrec.DATE_CREATED                := :old.DATE_CREATED;
	oldrec.STUDY_SUBJECT_ID            := :old.STUDY_SUBJECT_ID;
	oldrec.DATE_UPDATED                := :old.DATE_UPDATED;
	oldrec.UPDATE_ID                   := :old.UPDATE_ID;

	IF (oldrec.CRF_VERSION_ID  <![CDATA[<>]]> newrec.CRF_VERSION_ID)  THEN
	    		SELECT cf.name INTO crf_old_name  FROM crf_version cf WHERE cf.crf_version_id = oldrec.crf_version_id;
			    SELECT cf.name INTO crf_new_name   FROM crf_version cf WHERE cf.crf_version_id = newrec.crf_version_id;
			   
	     
			    INSERT INTO audit_log_event(
				audit_id, 
				audit_date,  
				audit_table,  
				user_id ,
				entity_id ,
				entity_name ,
				audit_log_event_type_id ,
				old_value ,
				new_value ,
				event_crf_id ,
				study_event_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval, 
					sysdate,
					'event_crf',
					oldrec.update_id,
					oldrec.event_crf_id, 
					'CRF version',
					'33',
					crf_old_name,
					crf_new_name,
					oldrec.event_crf_id,
					oldrec.study_event_id
			      );
	       END IF;
	end;
		
		 /* -------------------------------------------------------------------------------- */
		 </sql>
	</changeSet>

	

  	</databaseChangeLog>