<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">
	<changeSet author="kkrumlian" id="2010-07-16-NA01-1">
		<comment>add study_id to rule table</comment>
		<addColumn tableName="rule">
			<column name="study_id" type="int" />
		</addColumn>
	</changeSet>
	<changeSet author="kkrumlian" id="2010-07-16-NA01-2" dbms="postgresql">
        <comment>update study_id to rule table</comment>
        <sql>
            update rule set study_id = (
                    select rs.study_id from rule_set rs, rule_set_rule rsr, rule r where
                    rsr.rule_set_id = rs.id and rule_id = r.id and r.id = rule.id  order by rsr.id desc LIMIT 1 )
        </sql>
    </changeSet>
    <changeSet author="kkrumlian" id="2010-07-16-NA01-3" dbms="postgresql">
        <comment>update study_id to rule table</comment>
        <sql splitStatements="false">
           CREATE OR REPLACE FUNCTION fix_rule_referencing_cross_study() RETURNS void AS
		    'DECLARE
		    
		     newExpressionId INTEGER DEFAULT 0;
		     newRuleId INTEGER DEFAULT 0;
		     mviews RECORD;
		
		    BEGIN
		
		    FOR mviews in select r.rule_expression_id as rrule_expression_id, rs.study_id as rsstudy_id, rsr.rule_id as rsrrule_id, rsr.id as rsrid  from rule_set rs, rule r,rule_set_rule rsr where  rsr.rule_set_id = rs.id and rule_id = r.id and  rs.study_id != r.study_id 
		    LOOP
		        newExpressionId := NEXTVAL(''rule_expression_id_seq'');
		        newRuleId := NEXTVAL(''rule_id_seq'');
		        INSERT INTO rule_expression select newExpressionId,value,context,owner_id,date_created,date_updated,update_id,status_id,0 from rule_expression where id = mviews.rrule_expression_id;
		        INSERT INTO rule SELECT newRuleId,name,description,oc_oid,enabled,newExpressionId,owner_id,date_created,date_updated,update_id,status_id,0,mviews.rsstudy_id FROM rule WHERE id = mviews.rsrrule_id ;
		        UPDATE rule_set_rule rsr set rule_id = newRuleId where rsr.id = mviews.rsrid;
		    END LOOP;
		
		    END;
		    ' LANGUAGE plpgsql VOLATILE;
		    COMMIT;
		    Select fix_rule_referencing_cross_study();
        </sql>
    </changeSet>
    <changeSet author="kkrumlian" id="2010-07-16-NA01-4" dbms="oracle" runOnChange="true">
        <comment>update study_id to rule table</comment>
        <sql>
            update rule set study_id = (
			SELECT rs.study_id FROM rule_set_rule rsr,rule_set rs where rsr.rule_set_id = rs.id and rsr.id = 
			(select max(rsr.id) from rule_set_rule rsr,rule_set rs, rule r 
			where 
			rsr.rule_set_id = rs.id and rule_id = r.id and r.id = rule.id 
            ))
        </sql>
    </changeSet>
    <changeSet author="kkrumlian" id="2010-07-16-NA01-5" dbms="oracle">
        <comment>create procedure to fix rule ref cross study problem, execute and then drop</comment>
        <sql splitStatements="false">
           CREATE OR REPLACE Procedure fix_rule_ref_cross_study
			IS      
			newExpressionId integer;
			newRuleId integer;
			cursor c1 is select r.rule_expression_id as rrule_expression_id, rs.study_id as rsstudy_id, rsr.rule_id as rsrrule_id, rsr.id as rsrid  from rule_set rs, rule r,rule_set_rule rsr where  rsr.rule_set_id = rs.id and rule_id = r.id and  rs.study_id != r.study_id ;
			
			BEGIN
			    FOR c in c1
			    LOOP
			        select rule_expression_id_seq.NEXTVAL into newExpressionId from dual;
			        select rule_id_seq.NEXTVAL into newRuleId from dual;
			        INSERT INTO rule_expression select newExpressionId,value,context,owner_id,date_created,date_updated,update_id,status_id,0 from rule_expression where id = c.rrule_expression_id;
			        INSERT INTO rule SELECT newRuleId,name,description,oc_oid,enabled,newExpressionId,owner_id,date_created,date_updated,update_id,status_id,0,c.rsstudy_id FROM rule WHERE id = c.rsrrule_id ;
			        UPDATE rule_set_rule rsr set rule_id = newRuleId where rsr.id = c.rsrid;
			    END LOOP;
			    RETURN;
			END;
			
			EXECUTE fix_rule_ref_cross_study();
            DROP PROCEDURE fix_rule_ref_cross_study;
        </sql>
    </changeSet>
</databaseChangeLog>
