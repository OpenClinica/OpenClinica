<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">

	    <changeSet author="ywang" id="2009-07-23-3930-1" dbms="postgresql">
	    <comment>create or replace event_crf_trigger for event crf sdv status</comment>
    	<sql splitStatements="false">
    		CREATE OR REPLACE FUNCTION event_crf_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
		BEGIN
			IF (TG_OP = ''UPDATE'') THEN
				IF(OLD.status_id <![CDATA[<>]]> NEW.status_id) THEN
				/*---------------*/
				/*Event CRF status changed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Status'';
				IF(OLD.status_id = ''1'' AND NEW.status_id = ''2'') THEN
				    IF (NEW.electronic_signature_status) THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''14'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            ELSE
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''8'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            END IF;
				ELSIF (OLD.status_id = ''1'' AND NEW.status_id = ''4'') THEN
				    IF (NEW.electronic_signature_status) THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''15'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            ELSE
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''10'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
		            END IF;
				ELSIF (OLD.status_id = ''4'' AND NEW.status_id = ''2'') THEN
		    		IF (NEW.electronic_signature_status) THEN
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''16'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
				    ELSE
		                INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
		                    VALUES (pk, ''11'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.status_id, NEW.status_id, NEW.event_crf_id);
				    END IF;
				END IF;
				/*---------------*/
				END IF;

				IF(OLD.date_interviewed <![CDATA[<>]]> NEW.date_interviewed) THEN
				/*---------------*/
				/*Event CRF date interviewed*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Date interviewed'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''9'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.date_interviewed, NEW.date_interviewed, NEW.event_crf_id);
				/*---------------*/
				END IF;

				IF((OLD.interviewer_name <![CDATA[<>]]> NEW.interviewer_name) AND (OLD.interviewer_name <![CDATA[<>]]> '''')) THEN
				/*---------------*/
				/*Event CRF interviewer name*/
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''Interviewer Name'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''9'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, OLD.interviewer_name, NEW.interviewer_name, NEW.event_crf_id);
				/*---------------*/
				END IF;

				IF(OLD.sdv_status <![CDATA[<>]]> NEW.sdv_status) THEN
				SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
				SELECT INTO entity_name_value ''EventCRF SDV Status'';
				INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
					VALUES (pk, ''32'', now(), NEW.update_id, ''event_crf'', NEW.event_crf_id, entity_name_value, (select case when OLD.sdv_status is true then ''TRUE'' else ''FALSE'' end),
					(select case when NEW.sdv_status is true then ''TRUE'' else ''FALSE'' end), NEW.event_crf_id);
				/*---------------*/
				END IF;
			RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		END;
		'
		    LANGUAGE plpgsql;
    	</sql>
    </changeSet>

    <changeSet author="ywang" id="2009-07-23-3930-2">
        <comment>Insert event crf sdv into audit_log_event_type  table</comment>
        <insert tableName="audit_log_event_type">
            <column name="audit_log_event_type_id" valueNumeric="32"/>
            <column name="name" value="EventCRF SDV Status"/>
        </insert>
        <rollback>delete from audit_log_event_type where audit_log_event_type_id = 32</rollback>
    </changeSet>

    <changeSet author="ywang" id="2009-07-23-3930-3" dbms="oracle">
    	<comment>modify trigger EVENT_CRF_UPDATE for EventCRF SDV Status</comment>
		<sql splitStatements="false">
		CREATE OR REPLACE TRIGGER event_crf_update
		    AFTER UPDATE ON event_crf
		    FOR EACH ROW
		declare
		trg_operation varchar2(10);
		newrec  event_crf%rowtype;
		oldrec  event_crf%rowtype;
		begin
		/* -- */
		newrec.EVENT_CRF_ID                := :new.EVENT_CRF_ID;
		newrec.STUDY_EVENT_ID              := :new.STUDY_EVENT_ID;
		newrec.CRF_VERSION_ID              := :new.CRF_VERSION_ID;
		newrec.DATE_INTERVIEWED            := :new.DATE_INTERVIEWED;
		newrec.INTERVIEWER_NAME            := :new.INTERVIEWER_NAME;
		newrec.COMPLETION_STATUS_ID        := :new.COMPLETION_STATUS_ID;
		newrec.STATUS_ID                   := :new.STATUS_ID;
		newrec.ANNOTATIONS                 := :new.ANNOTATIONS;
		newrec.DATE_COMPLETED              := :new.DATE_COMPLETED;
		newrec.VALIDATOR_ID                := :new.VALIDATOR_ID;
		newrec.DATE_VALIDATE               := :new.DATE_VALIDATE;
		newrec.DATE_VALIDATE_COMPLETED     := :new.DATE_VALIDATE_COMPLETED;
		newrec.VALIDATOR_ANNOTATIONS       := :new.VALIDATOR_ANNOTATIONS;
		newrec.VALIDATE_STRING             := :new.VALIDATE_STRING;
		newrec.OWNER_ID                    := :new.OWNER_ID;
		newrec.DATE_CREATED                := :new.DATE_CREATED;
		newrec.STUDY_SUBJECT_ID            := :new.STUDY_SUBJECT_ID;
		newrec.DATE_UPDATED                := :new.DATE_UPDATED;
		newrec.UPDATE_ID                   := :new.UPDATE_ID;
		newrec.ELECTRONIC_SIGNATURE_STATUS := :new.ELECTRONIC_SIGNATURE_STATUS;
		newrec.SDV_STATUS                  := :new.SDV_STATUS;
		/* -- */
		oldrec.EVENT_CRF_ID                := :old.EVENT_CRF_ID;
		oldrec.STUDY_EVENT_ID              := :old.STUDY_EVENT_ID;
		oldrec.CRF_VERSION_ID              := :old.CRF_VERSION_ID;
		oldrec.DATE_INTERVIEWED            := :old.DATE_INTERVIEWED;
		oldrec.INTERVIEWER_NAME            := :old.INTERVIEWER_NAME;
		oldrec.COMPLETION_STATUS_ID        := :old.COMPLETION_STATUS_ID;
		oldrec.STATUS_ID                   := :old.STATUS_ID;
		oldrec.ANNOTATIONS                 := :old.ANNOTATIONS;
		oldrec.DATE_COMPLETED              := :old.DATE_COMPLETED;
		oldrec.VALIDATOR_ID                := :old.VALIDATOR_ID;
		oldrec.DATE_VALIDATE               := :old.DATE_VALIDATE;
		oldrec.DATE_VALIDATE_COMPLETED     := :old.DATE_VALIDATE_COMPLETED;
		oldrec.VALIDATOR_ANNOTATIONS       := :old.VALIDATOR_ANNOTATIONS;
		oldrec.VALIDATE_STRING             := :old.VALIDATE_STRING;
		oldrec.OWNER_ID                    := :old.OWNER_ID;
		oldrec.DATE_CREATED                := :old.DATE_CREATED;
		oldrec.STUDY_SUBJECT_ID            := :old.STUDY_SUBJECT_ID;
		oldrec.DATE_UPDATED                := :old.DATE_UPDATED;
		oldrec.UPDATE_ID                   := :old.UPDATE_ID;
		oldrec.ELECTRONIC_SIGNATURE_STATUS := :old.ELECTRONIC_SIGNATURE_STATUS;
		oldrec.SDV_STATUS                  := :old.SDV_STATUS;
		/* --
		   -- */
		  if inserting then
		    trg_operation := 'INSERT';
		  elsif updating then
		    trg_operation := 'UPDATE';
		  elsif deleting then
		    trg_operation := 'DELETE';
		  end if;
		  /* -- */
		   clinica_table_api.event_crf_trigger(trg_operation, newrec, oldrec);
		end;
		/* / */
		</sql>
	</changeSet>
		<changeSet author="ywang" id="2009-07-23-3930-4" dbms="oracle" runOnChange="true">
		<comment>modify clinica_table_api for event_crf_triger adding event crf sdv status</comment>
	<sql splitStatements="false">
		CREATE OR REPLACE package body clinica_table_api is

		procedure event_crf_trigger(
		      tg_op varchar2
		     ,newrec in out event_crf%rowtype
		     ,oldrec event_crf%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		BEGIN
		    IF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
		       /* --------------- */
		       /* --Event CRF status changed */
			entity_name_value := 'Status';
			 /* -- */
			IF (nvl(OLDREC.status_id, '-1') = '1' AND nvl(NEWREC.status_id, '-1') = '2') THEN
			    /* -- */
				    IF (NEWREC.electronic_signature_status = '1') THEN
			      event_type_id := '14';
			    ELSE
			      event_type_id := '8';
			    END IF;
			    /* -- */
			ELSIF (nvl(OLDREC.status_id, '-1') = '1' AND nvl(NEWREC.status_id, '-1') = '4') THEN
			    /* -- */
				    IF (NEWREC.electronic_signature_status = '1') THEN
			      event_type_id := '15';
			    ELSE
			      event_type_id := '10';
			    END IF;
			    /* -- */
			ELSIF (nvl(OLDREC.status_id, '-1') = '4' AND nvl(NEWREC.status_id, '-1') = '2') THEN
			    /* -- */
				    IF (NEWREC.electronic_signature_status = '1') THEN
			      event_type_id := '16';
			    ELSE
			      event_type_id := '11';
			    END IF;
			    /* -- */
			END IF;
			/* -- */
			if event_type_id is not null then
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.status_id,
				NEWREC.status_id,
				NEWREC.event_crf_id
			      );
			END IF;
		       END IF;

			IF (nvl(OLDREC.date_interviewed, '01-JAN-1000') <![CDATA[<>]]> nvl(NEWREC.date_interviewed, '01-JAN-1000')) THEN
			  /* -- Event CRF date interviewed */
			  entity_name_value := 'Date interviewed';
			  event_type_id := '9';
			  /* -- */
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.date_interviewed,
				NEWREC.date_interviewed,
				NEWREC.event_crf_id
			      );
			END IF;

			IF((nvl(OLDREC.interviewer_name, ' ') <![CDATA[<>]]> nvl(NEWREC.interviewer_name, ' ')) AND (OLDREC.interviewer_name is not null)) THEN
			  /* -- Event CRF interviewer name */
			  entity_name_value := 'Interviewer Name';
			  event_type_id := '9';
			  /* -- */
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.interviewer_name,
				NEWREC.interviewer_name,
				NEWREC.event_crf_id
			      );
			END IF;

			IF(OLDREC.sdv_status <![CDATA[<>]]> NEWREC.sdv_status) THEN
			  entity_name_value := 'EventCRF SDV Status';
			  event_type_id := '32';
			  /* -- */
			    INSERT INTO audit_log_event(
				audit_id,
				audit_log_event_type_id,
				audit_date,
				user_id,
				audit_table,
				entity_id,
				entity_name,
				old_value,
				new_value,
				event_crf_id
			      ) VALUES (
				audit_log_event_audit_id_seq.nextval,
				event_type_id,
				sysdate,
				NEWREC.update_id,
				'event_crf',
				NEWREC.event_crf_id,
				entity_name_value,
				OLDREC.sdv_status,
				NEWREC.sdv_status,
				NEWREC.event_crf_id
			      );
			END IF;
		    END IF;
		END;
		 /* -------------------------------------------------------------------------------- */



		procedure global_subject_trigger(
		      tg_op varchar2
		     ,newrec in out subject%rowtype
		     ,oldrec subject%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		BEGIN
		    --
		    IF (TG_OP = 'INSERT') THEN
			/* --------------- */
			/* --Subject created */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id)
			    VALUES (audit_log_event_audit_id_seq.nextval, '5', sysdate, NEWREC.owner_id, 'subject', NEWREC.subject_id);
			/* --------------- */
		    ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
		       /*  --Subject status changed */
			entity_name_value  := 'Status';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '6', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.status_id, NEWREC.status_id);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.unique_identifier, '-1') <![CDATA[<>]]> nvl(NEWREC.unique_identifier, '-1')) THEN
			/* --------------- */
			/*  --Subject status changed */
			entity_name_value  := 'Person ID';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '7', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.unique_identifier, NEWREC.unique_identifier);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.date_of_birth, '01-JAN-1000') <![CDATA[<>]]> nvl(NEWREC.date_of_birth, '01-JAN-1000')) THEN
			/* --------------- */
			/*  --Subject status changed */
			entity_name_value  := 'Date of Birth';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '7', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.date_of_birth, NEWREC.date_of_birth);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.gender, '-1') <![CDATA[<>]]> nvl(NEWREC.gender, '-1')) THEN
			/* --------------- */
			/*  --Subject status changed */
			entity_name_value  := 'Gender';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '7', sysdate, NEWREC.update_id, 'subject', NEWREC.subject_id, entity_name_value, OLDREC.gender, NEWREC.gender);
			/* --------------- */
			END IF;

		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure item_data_trigger(
		      tg_op varchar2
		     ,newrec in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   ) is
		event_type_id    varchar2(10) := null;
		entity_name_value varchar2(200);
		std_evnt_id INTEGER;
		crf_version_id INTEGER;
		luser_id  audit_log_event.user_id%type;
		/* -- */
		BEGIN
		    /* -- */
		    IF (TG_OP = 'DELETE') THEN
			/* --------------- */
		       /*  --Item data deleted (by deleting an event crf) */
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = OLDREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			begin
			  SELECT ec.study_event_id
			    INTO std_evnt_id
			    FROM event_crf ec
			   WHERE ec.event_crf_id = OLDREC.event_crf_id;
			  /* -- */
			exception
			  when others then
			    std_evnt_id := null;
			end;
			/* -- */
			begin
			  SELECT ec.crf_version_id
			    INTO crf_version_id
			    FROM event_crf ec
			   WHERE ec.event_crf_id = OLDREC.event_crf_id;
			exception
			  when others then
			    crf_version_id := null;
			end;
			/* -- */
			luser_id := oldrec.update_id;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, event_crf_id,study_event_id,event_crf_version_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '13', sysdate, luser_id, 'item_data', OLDREC.item_data_id, entity_name_value, OLDREC.value, OLDREC.event_crf_id,std_evnt_id,crf_version_id);

			ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
			/* --Item data status changed (by removing an event crf)*/
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = NEWREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '12', sysdate, NEWREC.update_id, 'item_data', NEWREC.item_data_id, entity_name_value, OLDREC.status_id, NEWREC.status_id, NEWREC.event_crf_id);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.value, ' ') <![CDATA[<>]]> nvl(NEWREC.value, ' ')) THEN
			/* --------------- */
			/* --Item data updated */
			begin
			  SELECT item.name
			    INTO entity_name_value
			    FROM item
			   WHERE item.item_id = NEWREC.item_id;
			exception
			  when others then
			    entity_name_value := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value, event_crf_id)
			    VALUES (audit_log_event_audit_id_seq.nextval , '1', sysdate, NEWREC.update_id, 'item_data', NEWREC.item_data_id, entity_name_value, OLDREC.value, NEWREC.value, NEWREC.event_crf_id);
			/* --------------- */
			END IF;
		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure study_subject_trigger(
		      tg_op varchar2
		     ,newrec in out study_subject%rowtype
		     ,oldrec study_subject%rowtype default null
		   ) is
		event_type_id         varchar2(10) := null;
		entity_name_value     varchar2(200);
		old_unique_identifier varchar2(200);
		new_unique_identifier varchar2(200);
		BEGIN
		    /* -- */
		    IF (TG_OP = 'INSERT') THEN
			/* --------------- */
		       /* --Study subject created */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id)
			    VALUES (audit_log_event_audit_id_seq.nextval,'2', sysdate, NEWREC.owner_id, 'study_subject', NEWREC.study_subject_id);
			/* --------------- */
		    ELSIF (TG_OP = 'UPDATE') THEN
			IF nvl(OLDREC.status_id, '-1') <![CDATA[<>]]> nvl(NEWREC.status_id, '-1') THEN
			/* --------------- */
			/* --Study subject status changed */
			entity_name_value := 'Status';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'3', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.status_id, NEWREC.status_id);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.label, ' ') <![CDATA[<>]]> nvl(NEWREC.label, ' ')) THEN
			/* --------------- */
			/* --Study subject value changed */
			entity_name_value := 'Study Subject ID';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'4', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.label, NEWREC.label);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.secondary_label, ' ') <![CDATA[<>]]> nvl(NEWREC.secondary_label, ' ')) THEN
			/* --------------- */
			/* --Study subject value changed */
			entity_name_value := 'Secondary Subject ID';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'4', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.secondary_label, NEWREC.secondary_label);
			/* --------------- */
			END IF;

			IF(nvl(OLDREC.enrollment_date, '01-JAN-1000') <![CDATA[<>]]> nvl(NEWREC.enrollment_date, '01-JAN-1000')) THEN
			/* --------------- */
			/* --Study subject value changed */
			entity_name_value := 'Enrollment Date';
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval,'4', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, OLDREC.enrollment_date, NEWREC.enrollment_date);
			/* --------------- */
			END IF;

			IF (nvl(OLDREC.study_id, -1) <![CDATA[<>]]> nvl(NEWREC.study_id, -1) ) THEN
			  /* --------------- */
			 /* --Subject reassigned */
			  entity_name_value := 'Study id';
			  /* -- */
			  begin
			    SELECT study.unique_identifier
			      INTO old_unique_identifier
			      FROM study study
			     WHERE study.study_id = OLDREC.study_id;
			  exception
			     when others then
			       old_unique_identifier := null;
			  end;
			  /* -- */
			  begin
			    SELECT study.unique_identifier
			      INTO new_unique_identifier
			      FROM study study
			     WHERE study.study_id = NEWREC.study_id;
			  exception
			     when others then
			       new_unique_identifier := null;
			  end;
			  /* -- */
			  INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, '27', sysdate, NEWREC.update_id, 'study_subject', NEWREC.study_subject_id, entity_name_value, old_unique_identifier, new_unique_identifier);
			  /* --------------- */
			END IF;

		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure study_event_trigger(
		      tg_op varchar2
		     ,newrec in out study_event%rowtype
		     ,oldrec study_event%rowtype default null
		   ) is
		event_type_id         varchar2(10) := null;
		entity_name_value     varchar2(200);
		begin
			IF (TG_OP = 'INSERT') THEN

			IF(NEWREC.subject_event_status_id = '1') THEN
			  event_type_id := '17';
			  entity_name_value := 'Status';
			  /* -- */
			  INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			  VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.owner_id, 'study_event', NEWREC.study_event_id, entity_name_value, '0', NEWREC.subject_event_status_id);
			END IF;
		    END IF;
		    /* -- */
			IF (TG_OP = 'UPDATE') THEN
				IF(OLDREC.subject_event_status_id <![CDATA[<>]]> NEWREC.subject_event_status_id) THEN
			  entity_name_value := 'Status';
			  /* -- */
			    IF(NEWREC.subject_event_status_id = '1') THEN
			      event_type_id := '17';
			    ELSIF(NEWREC.subject_event_status_id = '3') THEN
			      event_type_id := '18';
			    ELSIF(NEWREC.subject_event_status_id = '4') THEN
			      event_type_id := '19';
			    ELSIF(NEWREC.subject_event_status_id = '5') THEN
			      event_type_id := '20';
			    ELSIF(NEWREC.subject_event_status_id = '6') THEN
			      event_type_id := '21';
			    ELSIF(NEWREC.subject_event_status_id = '7') THEN
			      event_type_id := '22';
			    ELSIF(NEWREC.subject_event_status_id = '8') THEN
			      event_type_id := '31';
				    END IF;
			    /* -- */
			    INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			    VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.subject_event_status_id, NEWREC.subject_event_status_id);
			    /* -- */
			    END IF;
			IF(OLDREC.status_id <![CDATA[<>]]> NEWREC.status_id) THEN
			    IF(NEWREC.status_id = '5' or NEWREC.status_id = '1') THEN
			      /* -- */
			      entity_name_value := 'Status';
			      event_type_id := '23';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.status_id, NEWREC.status_id);
			      /* -- */
			    END IF;
			END IF;
			IF(OLDREC.date_start <![CDATA[<>]]> NEWREC.date_start) THEN
			      /* -- */
			      entity_name_value := 'Start date';
			      event_type_id := '24';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.date_start, NEWREC.date_start);
			      /* -- */
			END IF;
			IF(OLDREC.date_end <![CDATA[<>]]> NEWREC.date_end) THEN
			      /* -- */
			      entity_name_value := 'End date';
			      event_type_id := '25';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.date_end, NEWREC.date_end);
			      /* -- */
			END IF;
			/* IF(OLDREC."location" <![CDATA[<>]]> NEWREC."location") THEN */
			IF(OLDREC.location <![CDATA[<>]]> NEWREC.location) THEN
			      /* -- */
			      entity_name_value := 'Location';
			      event_type_id := '26';
			      /* -- */
			      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			      /*VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC."location", NEWREC."location");*/
			      VALUES (audit_log_event_audit_id_seq.nextval, event_type_id, sysdate, NEWREC.update_id, 'study_event', NEWREC.study_event_id, entity_name_value, OLDREC.location, NEWREC.location);
			      /* -- */
			END IF;

			END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure subject_grp_assign_trigger(
		      tg_op varchar2
		     ,newrec in out subject_group_map%rowtype
		     ,oldrec subject_group_map%rowtype default null
		   ) is
		/* -- */
		new_group_name study_group.name%type;
		old_group_name study_group.name%type;
		/* -- */
		begin
		    IF (TG_OP = 'INSERT') THEN
			/* -- */
			begin
			  SELECT sg.name
			    INTO new_group_name
			    FROM study_group sg
			   WHERE sg.study_group_id = NEWREC.study_group_id;
			exception
			   when no_data_found then
			     new_group_name := null;
			end;
			/* -- */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (audit_log_event_audit_id_seq.nextval,  '28', sysdate, NEWREC.owner_id, 'subject_group_map', NEWREC.study_subject_id, 'Status','', new_group_name);
		      /* -- */
		    ELSIF (TG_OP = 'UPDATE') THEN

			IF nvl(OLDREC.study_group_id, -1) <![CDATA[<>]]> nvl(NEWREC.study_group_id, -1) THEN

			  begin
			    SELECT sg.name
			      INTO old_group_name
			      FROM study_group sg
			     WHERE sg.study_group_id = OLDREC.study_group_id;
			  exception
			     when no_data_found then
			       old_group_name := null;
			  end;
			  /* -- */
			  begin
			    SELECT sg.name
			      INTO new_group_name
			      FROM study_group sg
			     WHERE sg.study_group_id = NEWREC.study_group_id;
			  exception
			     when no_data_found then
			       new_group_name := null;
			  end;
			  /* -- */
			  INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			  VALUES (audit_log_event_audit_id_seq.nextval,  '29', sysdate, NEWREC.update_id, 'subject_group_map', NEWREC.study_subject_id, 'Status', old_group_name, new_group_name);
			END IF;
		    END IF;
		END;
		/* -------------------------------------------------------------------------------- */



		procedure repeating_item_data_trigger(
		      tg_op varchar2
		     ,newrec in out item_data%rowtype
		     ,oldrec item_data%rowtype default null
		   ) is
		/* -- */
		std_evnt_id         event_crf.study_event_id%type;
		crf_version_id      event_crf.crf_version_id%type;
		validator_id        event_crf.validator_id%type;
		event_crf_status_id event_crf.status_id%type;
		entity_name_value   item.name%type;
		/* -- */
		begin
		  /* -- */
		 IF (TG_OP = 'INSERT') THEN
		   /* -- */
		    begin
		      SELECT item.name
			INTO entity_name_value
			FROM item
		       WHERE item.item_id = NEWREC.item_id;
		    exception
		      when no_data_found then
			entity_name_value := null;
		    end;
		    /* -- */
		    begin
		      SELECT ec.study_event_id,
			     ec.crf_version_id,
			     ec.validator_id,
			     ec.status_id
			INTO
			     std_evnt_id,
			     crf_version_id,
			     validator_id,
			     event_crf_status_id
			FROM event_crf ec
		       WHERE ec.event_crf_id = NEWREC.event_crf_id;
		    exception
		      when no_data_found then
			std_evnt_id := null;
			crf_version_id := null;
			validator_id := null;
			event_crf_status_id := null;
		    end;
		    /* -- */
		    IF (nvl(NEWREC.status_id, -1) = '2' AND
			nvl(NEWREC.ordinal, -1)<![CDATA[>]]>1 AND
			nvl(validator_id, -1)<![CDATA[>]]>0 AND
			nvl(event_crf_status_id, -1)  = '4') THEN /* -- DDE */
		      INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, new_value, event_crf_id, study_event_id, event_crf_version_id)
		      VALUES (audit_log_event_audit_id_seq.nextval, '30', sysdate, NEWREC.owner_id, 'item_data', NEWREC.item_data_id, entity_name_value, NEWREC.value, NEWREC.event_crf_id, std_evnt_id, crf_version_id);
		    ELSE
		    IF (nvl(NEWREC.status_id, -1) = '2' AND
			nvl(NEWREC.ordinal, -1)<![CDATA[>]]>1 AND
			nvl(event_crf_status_id, -1)  = '2') THEN /* -- ADE */
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, new_value, event_crf_id, study_event_id, event_crf_version_id)
			VALUES (audit_log_event_audit_id_seq.nextval, '30', sysdate, NEWREC.owner_id, 'item_data', NEWREC.item_data_id, entity_name_value, NEWREC.value, NEWREC.event_crf_id, std_evnt_id, crf_version_id);
		      END IF;
		    END IF;
		  END IF;
		END;
		/* -------------------------------------------------------------------------------- */


		end;
		/* / */
	      /* show errors; */

	</sql>
	</changeSet>
</databaseChangeLog>