<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<databaseChangeLog xmlns="http://www.liquibase.org/xml/ns/dbchangelog/1.9" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog/1.9 http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd">         
<!-- Postgres database specific functions -->
  
    <changeSet author="jkeremian" id="2019-05-22-OC-10631-01">
    	<preConditions onFail="MARK_RAN">
		<dbms type="postgresql" />
		    <!--<runningAs username="clinica" />-->
	    </preConditions>
    	<sql splitStatements="false">

	 	CREATE OR REPLACE FUNCTION study_subject_detail_trigger() RETURNS "trigger"
		    AS 'DECLARE
			pk INTEGER;
			entity_name_value TEXT;
			updateid INT;

			BEGIN
			SELECT INTO updateid ss.update_id from study_subject ss where ss.study_subject_id=NEW.study_subject_id;

			IF (TG_OP = ''INSERT'') THEN
				/*---------------*/
				 /*Study subject Detail created*/

			IF(NEW.first_name  IS NOT NULL) THEN
			/*first name value captured*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant First Name'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''44'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, null, NEW.first_name);
			END IF;

			IF(NEW.email  IS NOT NULL) THEN
			/*email value captured*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Email Address'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''47'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, null, NEW.email);
			END IF;

			IF(NEW.phone  IS NOT NULL) THEN
			/*phone number value captured*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Phone Number'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''50'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, null, NEW.phone);
			END IF;

			IF(NEW.last_name  IS NOT NULL) THEN
			/*last name value captured*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Last Name'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''53'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, null, NEW.last_name);
			END IF;

			IF(NEW.identifier  IS NOT NULL) THEN
			/*identifier value captured*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Identifier'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''56'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, null, NEW.identifier);
			END IF;

			RETURN NULL; /*return values ignored for ''after'' triggers*/



			ELSIF (TG_OP = ''UPDATE'') THEN

			/*Study subject Detail Updated */

			IF( (OLD.first_name IS NULL and NEW.first_name IS NOT NULL)  OR (OLD.first_name IS NOT NULL and NEW.first_name IS NULL)  OR OLD.first_name <![CDATA[<>]]> NEW.first_name) THEN
			/*first name value changed*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant First Name'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''44'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.first_name, NEW.first_name);
			END IF;

			IF( (OLD.email IS NULL and NEW.email IS NOT NULL)  OR (OLD.email IS NOT NULL and NEW.email IS NULL)  OR OLD.email <![CDATA[<>]]> NEW.email) THEN
			/*email value changed*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Email Address'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''47'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.email, NEW.email);
			END IF;

			IF( (OLD.phone IS NULL and NEW.phone IS NOT NULL)  OR (OLD.phone IS NOT NULL and NEW.phone IS NULL)  OR OLD.phone <![CDATA[<>]]> NEW.phone) THEN
			/*Phone number value changed*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Phone Number'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''50'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.phone, NEW.phone);
			END IF;

			IF( (OLD.last_name IS NULL and NEW.last_name IS NOT NULL)  OR (OLD.last_name IS NOT NULL and NEW.last_name IS NULL)  OR OLD.last_name <![CDATA[<>]]> NEW.last_name) THEN
			/*last name value changed*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Last Name'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''53'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.last_name, NEW.last_name);
			END IF;

			IF( (OLD.identifier IS NULL and NEW.identifier IS NOT NULL)  OR (OLD.identifier IS NOT NULL and NEW.identifier IS NULL)  OR OLD.identifier <![CDATA[<>]]> NEW.identifier) THEN
			/*identifier value changed*/
			SELECT INTO pk NEXTVAL(''audit_log_event_audit_id_seq'');
			SELECT INTO entity_name_value ''Participant Identifier'';
			INSERT INTO audit_log_event(audit_id, audit_log_event_type_id, audit_date, user_id, audit_table, entity_id, entity_name, old_value, new_value)
			VALUES (pk, ''56'', now(), updateid, ''study_subject'', NEW.study_subject_id, entity_name_value, OLD.identifier, NEW.identifier);
			END IF;


			RETURN NULL;  /*return values ignored for ''after'' triggers*/
			END IF;
		END;
		'
		    LANGUAGE plpgsql;
		
    	</sql>
    </changeSet>


</databaseChangeLog>
